################################################################################################################
###   Mandatory use of some masculine forms in some contexts / Emploi forcé de certaines formes masculines   ###
################################################################################################################

# Ex: "[this] monarch" => "[ce/cette] monarque" (lower case / minuscule)
# Mandatory use of masculine form "ce" for some situations / Emploi forcé de la forme masculine "ce" dans certains contextes
defined_text = {
	name = GetCeCetteFDir
	text = {
		localisation_key = string_ce_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[This] monarch" => "[Ce/Cette] monarque" (upper case / majuscule)
# Mandatory use of masculine form "Ce" for some situations / Emploi forcé de la forme masculine "Ce" dans certains contextes
defined_text = {
	name = GetCeCetteFDirCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[this] (wo)man" => "[cet/cette] homme/femme" (lower case / minuscule)
# Mandatory use of masculine form "cet" for some situations / Emploi forcé de la forme masculine "cet" dans certains contextes
defined_text = {
	name = GetCetCetteFDir
	text = {
		localisation_key = string_cet_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[This] (wo)man" => "[Cet/Cette] homme/femme" (upper case / majuscule)
# Mandatory use of masculine form "Cet" for some situations / Emploi forcé de la forme masculine "Cet" dans certains contextes
defined_text = {
	name = GetCetCetteFDirCap
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[their] King/Emperor/Queen/Empress" => "s[on] roi / s[on] empereur / s[a] reine / s[on] impératrice"
defined_text = {
	name = GetOnADir
	random = no
	text = {
		localisation_key = string_on_FR
		trigger = {
			is_female = no
		}
	}
}


# Ex: "[their] sovereign" => "s[on] souverain / s[a] souveraine"
defined_text = {
	name = GetOnAFDir
	text = {
		localisation_key = string_on_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[the one] which" => "[celui/celle] qui"
defined_text = {
	name = GetCeluiCelleDir
	text = {
		localisation_key = string_celui_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_celle_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[The one] which" => "[Celui/Celle] qui"
defined_text = {
	name = GetCeluiCelleDirCap
	text = {
		localisation_key = string_celui_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_celle_cap_FR
		trigger = {
			is_female = yes
		}
	}
}

# Ex: "[To the] monarch" => "[au/à la] monarque" (lower case / minuscule)
defined_text = {
	name = GetAuAlaFDir
	text = {
		localisation_key = string_au_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[To the] monarch" => "[Au/À la] monarque" (upper case / majuscule)
defined_text = {
	name = GetAuAlaFDirCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[if] he/she" => "[s'il]/[si elle]" (lower case / minuscule)
defined_text = {
	name = GetSilSielleDir
	text = {
		localisation_key = string_sil_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_sielle_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[If] he/she" => "[S'il]/[Si elle]" (upper case / majuscule)
defined_text = {
	name = GetSilSielleDirCap
	text = {
		localisation_key = string_sil_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_sielle_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "great ruler" => "grand[ø/e] dirigeant[ø/e]"
defined_text = {
	name = GetXEDir
	text = {
		localisation_key = string_XX_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_e_FR
		trigger = {
			is_female = yes
		}
	}
}

# Ex: "The ruler married a great [lord/lady]" => "Le dirigeant a épousé un[e] grand[e] dame/La dirigeant a épousé un[ø] grand[ø] seigneur"
# Used to define a character the opposite gender of the ruler
defined_text = {
	name = GetAntiXEDir
	text = {
		localisation_key = string_e_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_XX_FR
		trigger = {
			is_female = yes
		}
	}
}

# Ex: "a [famous] King/Queen" => "un roi fam[eux] / une reine fam[euse]"
defined_text = {
	name = GetEuxEuseDir
	text = {
		localisation_key = string_eux_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_euse_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "an [industrious] King/Queen" => "un roi travaill[eur] / une reine travaill[euse]"
defined_text = {
	name = GetEurEuseDir
	text = {
		localisation_key = string_eur_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_euse_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "the first King/Queen" => "(le/la) premi[er]/premi[ère] roi/reine"
defined_text = {
	name = GetErEreDir
	text = {
		localisation_key = string_er_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_ere_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "the [favorite] monarque" => "le monarque favori[ø] / la monarque favori[te]"
defined_text = {
	name = GetXTeDir
	text = {
		localisation_key = string_XX_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_te_FR
		trigger = {
			is_female = yes
		}
	}
}

# Ex: "[new] monarch" => "nouv[eau/elle] monarque"
defined_text = {
	name = GetEauElleFDir
	text = {
		localisation_key = string_eau_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[handsome/pretty] (wo)man" => "un(e) b[el/elle] homme/femme"
defined_text = {
	name = GetElElleFDir
	text = {
		localisation_key = string_el_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "The [false] Emperor" => "le [faux] empereur / la [fausse] impératrice" (lower case / minuscule)
defined_text = {
	name = GetFauxFausseDir
	text = {
		localisation_key = string_faux_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_fausse_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[False] Emperor or not..." => "[Faux] empereur / [Fausse] impératrice ou pas..." (upper case / majuscule)
defined_text = {
	name = GetFauxFausseDirCap
	text = {
		localisation_key = string_faux_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_fausse_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "The ruler will take a [spouse]" => "Le dirigeant va prendre une [épouse]/La dirigeante va prendre un [époux/épouse]"
# Defines a character the opposite gender of the ruler / Utilisé pour définir un personnage de sexe opposé à celui du dirigeant ou de la dirigeante
defined_text = {
	name = GetAntiEpouxEpouseDir
	text = {
		localisation_key = string_epouse_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_epoux_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "The ruler will marry the [daughter/son] of a noble family" => "Le dirigeant va épouser la [fille] d'une grande famille/La dirigeante va épouser le [fils] d'une grande famille"
# Defines a character the opposite gender of the ruler / Utilisé pour définir un personnage de sexe opposé à celui du dirigeant ou de la dirigeante
 defined_text = {
	name = GetAntiFilsFilleDir
	text = {
		localisation_key = string_fille_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_fils_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "The ruler marries his [brother/sister]" => "Le dirigeant épouse sa [soeur]/La dirigeante épouse son [frère]"
# Defines a character the opposite gender of the ruler / Utilisé pour définir un personnage de sexe opposé à celui du dirigeant ou de la dirigeante
defined_text = {
	name = GetAntiFrereSoeurDir
	text = {
		localisation_key = string_soeur_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_frere_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "the [Elector] of Bavaria" => "l'Élec[teur/trice] de Bavière"
defined_text = {
	name = GetTeurTriceDir
	text = {
		localisation_key = string_teur_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_trice_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "as a [Prince] of the HRE" => "en tant que [prince]/[princesse] du Saint-Empire romain germanique" (lower case / minuscule)
defined_text = {
	name = GetPrincePrincesseDir
	text = {
		localisation_key = string_prince_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_princesse_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[Prince] of the HRE" => "[Prince]/[Princesse] du Saint-Empire romain germanique" (upper case / majuscule)
defined_text = {
	name = GetPrincePrincesseDirCap
	text = {
		localisation_key = string_prince_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_princesse_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "He/She is Holy Roman [Emperor]/[Empress]" => "Il est l'[empereur] du SERG / Elle est l'[impératrice] du SERG" (lower case / minuscule)
defined_text = {
	name = GetEmpereurImperatriceDir
	text = {
		localisation_key = string_empereur_FR
		trigger = {
			is_emperor = yes
			is_female = no
		}
	}
	text = {
		localisation_key = string_imperatrice_FR
		trigger = {
			is_emperor = yes
			is_female = yes
		}
	}
}
# Ex: "Holy Roman [Emperor]/[Empress] or not..." => "[Empereur]/[Impératrice] du SERG ou non..." (upper case / majuscule)
defined_text = {
	name = GetEmpereurImperatriceDirCap
	text = {
		localisation_key = string_empereur_cap_FR
		trigger = {
			is_emperor = yes
			is_female = no
		}
	}
	text = {
		localisation_key = string_imperatrice_cap_FR
		trigger = {
			is_emperor = yes
			is_female = yes
		}
	}
}
# Ex: "He/She is Holy Roman [Emperor]/[Empress]" => "Il est l'[empereur] de Chine / Elle est l'[impératrice] de Chine" (lower case / minuscule)
defined_text = {
	name = GetEmpereurImperatriceChineDir
	text = {
		localisation_key = string_empereur_FR
		trigger = {
			is_emperor_of_china = yes
			is_female = no
		}
	}
	text = {
		localisation_key = string_imperatrice_FR
		trigger = {
			is_emperor_of_china = yes
			is_female = yes
		}
	}
}
# Ex: "[Emperor]/[Empress] of China or not..." => "[Empereur]/[Impératrice] de Chine ou non..." (upper case / majuscule)
defined_text = {
	name = GetEmpereurImperatriceChineDirCap
	text = {
		localisation_key = string_empereur_cap_FR
		trigger = {
			is_emperor_of_china = yes
			is_female = no
		}
	}
	text = {
		localisation_key = string_imperatrice_cap_FR
		trigger = {
			is_emperor_of_china = yes
			is_female = yes
		}
	}
}


# Ex: "(S)he's [King] in Prussia" => "Il/Elle est [roi]/[reine] en Prusse" (lower case / minuscule)
defined_text = {
	name = GetRoiReineDir
	text = {
		localisation_key = string_roi_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_reine_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "Being [King/Queen] IN Prussia is not being [King/Queen] OF Prussia" => "[Roi]/[Reine] EN Prusse n'est pas être roi/reine DE Prusse" (upper case / majuscule)
defined_text = {
	name = GetRoiReineDirCap
	text = {
		localisation_key = string_roi_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_reine_cap_FR
		trigger = {
			is_female = yes
		}
	}
}

# Ex: "So [he/she] tried" => "Aussi a-t-[il/elle] tenté de" (lower case / minuscule)
defined_text = {
	name = GetIlElleHrt
	text = {
		localisation_key = string_il_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[He/She] tried" => "[Il/Elle] a tenté de" (upper case / majuscule)
defined_text = {
	name = GetIlElleHrtCap
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[he/she] (= the heir's next spouse)" => "[il/elle] (= la future de l'héritier/le futur de l'héritière)" (lower case / minuscule)
# Used to define a character the opposite gender of the heir
defined_text = {
	name = GetAntiIlElleHrt
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_il_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[He/She] (= the heir's next spouse)" => "[Il/Elle] (= la future de l'héritier/le future de l'héritière)" (upper case / majuscule)
# Used to define a character the opposite gender of the heir
defined_text = {
	name = GetAntiIlElleHrtCap
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "As for [him/her]" => "Quant à [lui/elle]" (lower case / minuscule)
defined_text = {
	name = GetLuiElleHrt
	text = {
		localisation_key = string_lui_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[Him/Her] is..." => "[Lui/Elle] est..." (upper case / majuscule)
defined_text = {
	name = GetLuiElleHrtCap
	text = {
		localisation_key = string_lui_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[from him/her]" => "cela dépendra [de lui/d'elle]" (lower case / minuscule)
defined_text = {
	name = GetDeluiDelleHrt
	text = {
		localisation_key = string_delui_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_delle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[From him/her] will depend" => "[De lui/D'elle] dépendra" (upper case / majuscule)
defined_text = {
	name = GetDeluiDelleHrtCap
	text = {
		localisation_key = string_delui_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_delle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "That [him/her]" => "[que lui/qu'elle]" (lower case / minuscule)
defined_text = {
	name = GetQueluiQuelleHrt
	text = {
		localisation_key = string_quelui_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_quelle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "That [him/her]" => "[Que lui/Qu'elle]" (upper case / majuscule)
defined_text = {
	name = GetQueluiQuelleHrtCap
	text = {
		localisation_key = string_quelui_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_quelle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "He saw [him/her]" => "Il [le/la] vit" (lower case / minuscule)
defined_text = {
	name = GetLeLaFHrt
	text = {
		localisation_key = string_le_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "Firing [him/her] would have been..." => "[Le/La] renvoyer aurait été..." (upper case / majuscule)
defined_text = {
	name = GetLeLaFHrtCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}

# Ex: "the nearest consort of the Heir" => "La consort [la] plus proche de l'héritier/Le consort [le] plus proche de l'héritière" (lower case / minuscule)
# Used to define a character the opposite gender of the ruler
defined_text = {
	name = GetAntiLeLaFHrt
	text = {
		localisation_key = string_la_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_le_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "The nearest consort of the Heir" => "[La] plus proche consort de l'héritier/[Le] plus proche consort de l'héritière" (upper case / majuscule)
# Used to define a character the opposite gender of the ruler
defined_text = {
	name = GetAntiLeLaFHrtCap
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}

###   le/la/l'   ###

# Ex: "[this] Prince/Princess/Heir/Heir" => "[ce] prince / [cet] héritier / [cette] princesse / [cette héritière]" (lower case / minuscule)
defined_text = {
	name = GetCeCetteHrt
	random = no
	text = {
		localisation_key = string_cette_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[this] Prince/Princess/Heir/Heir" => "[Ce] prince / [Cet] héritier / [Cette] princesse / [Cette héritière]" (lower case / minuscule)
defined_text = {
	name = GetCeCetteHrtCap
	random = no
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[this] young prince/princess" => "[ce/cette] jeune prince(sse)" (lower case / minuscule)
defined_text = {
	name = GetCeCetteFHrt
	text = {
		localisation_key = string_ce_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[This] young prince/princess" => "[Ce/Cette] jeune prince(sse)" (upper case / majuscule)
defined_text = {
	name = GetCeCetteFHrtCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[this] (wo)man" => "[cet/cette] homme/femme" (lower case / minuscule)
defined_text = {
	name = GetCetCetteFHrt
	text = {
		localisation_key = string_cet_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[This] (wo)man" => "[Cet] homme / [Cette] femme" (upper case / majuscule)
defined_text = {
	name = GetCetCetteFHrtCap
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[their] prince/princess/heir" => "s[on] prince / s[on] héritier / s[a] princesse / s[on] héritière"
defined_text = {
	name = GetOnAHrt
	random = no
	text = {
		localisation_key = string_on_FR
		trigger = {
			has_female_heir = no
		}
	}
}


# Ex: "[his] son/daughter" => "s[on] fils / s[a] fille"
defined_text = {
	name = GetOnAFHrt
	text = {
		localisation_key = string_on_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[the one] which" => "[celui/celle] qui" (lower case / minuscule)
defined_text = {
	name = GetCeluiCelleHrt
	text = {
		localisation_key = string_celui_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_celle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[The one] which" => "[Celui/Celle] qui" (upper case / majuscule)
defined_text = {
	name = GetCeluiCelleHrtCap
	text = {
		localisation_key = string_celui_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_celle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}

# Ex: "[of the] son/daughter" => "[du] fils / [de la] fille" (lower case / minuscule)
defined_text = {
	name = GetDuDelaFHrt
	text = {
		localisation_key = string_du_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[Of the] son/daughter" => "[Du] fils / [De la] fille" (upper case / majuscule)
defined_text = {
	name = GetDuDelaFHrtCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}

# Ex: "[to the] son/daughter" => "[au] fils / [à la] fille" (lower case / minuscule)
defined_text = {
	name = GetAuAlaFHrt
	text = {
		localisation_key = string_au_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[To the] son/daughter" => "[Au] fils / [À la] fille" (upper case / majuscule)
defined_text = {
	name = GetAuAlaFHrtCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[if] he/she wants" => "[s'il] veut / [si elle] veut" (lower case / minuscule)
defined_text = {
	name = GetSilSielleHrt
	text = {
		localisation_key = string_sil_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_sielle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[If] he/she wants" => "[S'il] veut / [Si elle] veut" (upper case / majuscule)
defined_text = {
	name = GetSilSielleHrtCap
	text = {
		localisation_key = string_sil_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_sielle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "next ruler" => "prochain[ø/e] dirigeant[ø/e]"
defined_text = {
	name = GetXEHrt
	text = {
		localisation_key = string_XX_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_e_FR
		trigger = {
			has_female_heir = yes
		}
	}
}

# Ex: "The heir married a great [lord/lady]" => "L'héritier a épousé un[e] grand[e] dame/L'héritière a épousé un[ø] grand[ø] seigneur"
# Used to define a character the opposite gender of the Heir
defined_text = {
	name = GetAntiXEHrt
	text = {
		localisation_key = string_e_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_XX_FR
		trigger = {
			has_female_heir = yes
		}
	}
}

# Ex: "a [famous] prince(ss)" => "un prince fam[eux] / une princesse fam[euse]"
defined_text = {
	name = GetEuxEuseHrt
	text = {
		localisation_key = string_eux_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_euse_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "an [industrious] heir" => "un héritier travaill[eur] / une héritière travaill[euse]"
defined_text = {
	name = GetEurEuseHrt
	text = {
		localisation_key = string_eur_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_euse_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "the first heir" => "le premi[er] hériti[er] / la premi[ère] hériti[ère]"
defined_text = {
	name = GetErEreHrt
	text = {
		localisation_key = string_er_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_ere_FR
		trigger = {
			has_female_heir = yes
		}
	}
}

# Ex: "the [favorite] heir" => "l'héritier favori[ø] / l'héritière favori[te]"
defined_text = {
	name = GetXTeHrt
	text = {
		localisation_key = string_XX_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_te_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[new] prince/princess/heir/heir" => "nouv[eau] prince / nouv[el] héritier / nouv[elle] princesse / nouv[elle] héritière"
defined_text = {
	name = GetEauElleHrt
	random = no
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[new] prince(ss)" => "nouv[eau] prince / nouv[elle] princesse"
defined_text = {
	name = GetEauElleFHrt
	text = {
		localisation_key = string_eau_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[such a] man/woman" => "un t[el] homme / une t[elle] femme"
defined_text = {
	name = GetElElleFHrt
	text = {
		localisation_key = string_el_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "The [false] heir" => "le [faux] héritier / la [fausse] héritière" (lower case / minuscule)
defined_text = {
	name = GetFauxFausseHrt
	text = {
		localisation_key = string_faux_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_fausse_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[False] heir or not..." => "[Faux] héritier / [Fausse] héritière ou pas..." (upper case / majuscule)
defined_text = {
	name = GetFauxFausseHrtCap
	text = {
		localisation_key = string_faux_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_fausse_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "The Heir will take a [wife/husband]" => "L'héritier va prendre un [époux]/L'héritière va prendre une [épouse]"
# Defines a character the opposite gender of the heir / Utilisé pour définir un personnage de sexe opposé à celui de l'héritier ou de l'héritière
defined_text = {
	name = GetAntiEpouxEpouseHrt
	text = {
		localisation_key = string_epouse_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_epoux_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "The Heir marries the [daughter/son] of a great family." => "L'héritier épouse la [fille] d'une grand. / L'héritière épouse le [fils] d'un grand."
# Defines a character the opposite gender of the heir / Utilisé pour définir un personnage de sexe opposé à celui de l'héritier ou de l'héritière
defined_text = {
	name = GetAntiFilsFilleHrt
	text = {
		localisation_key = string_fille_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_fils_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "The heir marries the [brother/sister] of a grandee." => "L'héritier épouse la [soeur] d'un grand. / L'héritière épouse le [frère] d'un grand."
# Defines a character the opposite gender of the heir / Utilisé pour définir un personnage de sexe opposé à celui de l'héritier ou de l'héritière
defined_text = {
	name = GetAntiFrereSoeurHrt
	text = {
		localisation_key = string_soeur_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_frere_FR
		trigger = {
			has_female_heir = yes
		}
	}
}



################################
###   Consorts // Consorts   ###
################################

# Ex: "So [he/she] tried" => "Aussi a-t-[il/elle] tenté de" (lower case / minuscule)
defined_text = {
	name = GetIlElleCons
	text = {
		localisation_key = string_il_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[He/She] tried" => "[Il/Elle] a tenté de" (upper case / majuscule)
defined_text = {
	name = GetIlElleConsCap
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[he/she] (= the consort dead spouse)" => "[il/elle] (= feu l'époux/l'épouse du/de la consort)"
# Used to define a character the opposite gender of the consort
defined_text = {
	name = GetAntiIlElleCons
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_il_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[He/She] (= the consort dead spouse)" => "[Il/Elle] (= feu l'époux/l'épouse du/de la consort)"
# Used to define a character the opposite gender of the consort
defined_text = {
	name = GetAntiIlElleConsCap
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "As for [him/her]" => "Quant à [lui/elle]" (lower case / minuscule)
defined_text = {
	name = GetLuiElleCons
	text = {
		localisation_key = string_lui_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[Him/Her] is..." => "[Lui/Elle] est..." (upper case / majuscule)
defined_text = {
	name = GetLuiElleConsCap
	text = {
		localisation_key = string_lui_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "That [him/her]" => "[que lui/qu'elle]" (lower case / minuscule)
defined_text = {
	name = GetQueluiQuelleCons
	text = {
		localisation_key = string_quelui_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_quelle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "That [him/her]" => "[Que lui/Qu'elle]" (upper case / majuscule)
defined_text = {
	name = GetQueluiQuelleConsCap
	text = {
		localisation_key = string_quelui_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_quelle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "He saw [him/her]" => "Il [le/la] vit" (lower case / minuscule)
defined_text = {
	name = GetLeLaFCons
	text = {
		localisation_key = string_le_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "Firing [him/her] would have been..." => "[Le/La] renvoyer aurait été..." (upper case / majuscule)
defined_text = {
	name = GetLeLaFConsCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "the consort mourns [him/her] (= the dead ruler)" => "la consort [le] pleure (= feu le dirigeant)/le consort [la] pleure (= feu la dirigeante)"
# Used to define a character the opposite gender of the consort
defined_text = {
	name = GetAntiLeLaFCons
	text = {
		localisation_key = string_la_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_le_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[The] consort's first spouse" => "[Le] premier époux de la consort/[La] première épouse de la consort"
# Used to define a character the opposite gender of the consort
defined_text = {
	name = GetAntiLeLaFConsCap
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


###   le/la/l'   ###

# Ex: "[This] Prince Consort/Emperor Consort/Princess Consort/Empress Consort" => "[Ce] prince consort / [Cet] empereur consort / [Cette] princesse consort / [Cette] impératrice consort" (upper case / majuscule)
defined_text = {
	name = GetCeCetteConsCap
	random = no
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}



# Ex: "[this] consort" => "[ce/cette] consort" (lower case / minuscule)
# Mandatory use of masculine form "ce" for some situations / Emploi forcé de la forme masculine "ce" dans certains contextes
defined_text = {
	name = GetCeCetteFCons
	text = {
		localisation_key = string_ce_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[This] sick person" => "[Cet/Cette] consort" (upper case / majuscule)
# Mandatory use of masculine form "Ce" for some situations / Emploi forcé de la forme masculine "Ce" dans certains contextes
defined_text = {
	name = GetCeCetteFConsCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[this] (wo)man" => "[cet/cette] homme/femme" (lower case / minuscule)
# Mandatory use of masculine form "cet" for some situations / Emploi forcé de la forme masculine "cet" dans certains contextes
defined_text = {
	name = GetCetCetteFCons
	text = {
		localisation_key = string_cet_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[This] (wo)man" => "[Cet/Cette] homme/femme" (upper case / majuscule)
# Mandatory use of masculine form "Cet" for some situations / Emploi forcé de la forme masculine "Cet" dans certains contextes
defined_text = {
	name = GetCetCetteFConsCap
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}

# Ex: "[his] consort" => "s[on]/s[a] consort"
defined_text = {
	name = GetOnAFCons
	text = {
		localisation_key = string_on_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[the one] which" => "[celui/celle] qui"
defined_text = {
	name = GetCeluiCelleCons
	text = {
		localisation_key = string_celui_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_celle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[The one] which" => "[Celui/Celle] qui"
defined_text = {
	name = GetCeluiCelleConsCap
	text = {
		localisation_key = string_celui_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_celle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[of the] new consort" => "[du] nouveau consort/[de la] nouvelle consort"
defined_text = {
	name = GetDuDelaFCons
	text = {
		localisation_key = string_du_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[Of the] new consort" => "[Du] nouveau consort/[De la] nouvelle consort"
defined_text = {
	name = GetDuDelaFConsCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[to the] consort" => "[au/à la] consort"
defined_text = {
	name = GetAuAlaFCons
	text = {
		localisation_key = string_au_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[To the] consort" => "[Au/À la] consort"
defined_text = {
	name = GetAuAlaFConsCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[if] he/she" => "[s'il]/[si elle]" (lower case / minuscule)
defined_text = {
	name = GetSilSielleCons
	text = {
		localisation_key = string_sil_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_sielle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[If] he/she" => "[S'il]/[Si elle]" (upper case / majuscule)
defined_text = {
	name = GetSilSielleConsCap
	text = {
		localisation_key = string_sil_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_sielle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "next regent" => "prochain[ø/e] régent[ø/e]"
defined_text = {
	name = GetXECons
	text = {
		localisation_key = string_XX_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_e_FR
		trigger = {
			has_female_consort = yes
		}
	}
}

# Ex: "The Consort is the spouse of a great ruler" => "Le consort est l'époux d'un[e] grand[e] dirigeant[e]/La consort est l'épouse d'un[ø] grand[ø] dirigeant[ø]"
# Used to define a character the opposite gender of the Consort
defined_text = {
	name = GetAntiXECons
	text = {
		localisation_key = string_e_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_XX_FR
		trigger = {
			has_female_consort = yes
		}
	}
}

# Ex: "a [famous] consort" => "un consort fam[eux] / une consort fam[euse]"
defined_text = {
	name = GetEuxEuseCons
	text = {
		localisation_key = string_eux_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_euse_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "an [industrious] consort" => "un consort travaill[eur] / une consort travaill[euse]"
defined_text = {
	name = GetEurEuseCons
	text = {
		localisation_key = string_eur_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_euse_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "the first consort" => "le/la premi[er/ère] consort"
defined_text = {
	name = GetErEreCons
	text = {
		localisation_key = string_er_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_ere_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "the [favorite] consort" => "le consort favori[ø] / la consort favori[te]"
defined_text = {
	name = GetXTeCons
	text = {
		localisation_key = string_XX_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_te_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[new] Prince Consort/Emperor Consort/Princess Consort/Empress Consort" => "nouv[eau] prince consort / nouv[el] empereur consort / nouv[elle] princesse consort / nouv[elle] impératrice consort"
defined_text = {
	name = GetEauElleCons
	random = no
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[new] consort" => "nouv[eau/elle] consort"
defined_text = {
	name = GetEauElleFCons
	text = {
		localisation_key = string_eau_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[new] spouse" => "nouv[el] époux / nouv[elle] épouse"
defined_text = {
	name = GetElElleFCons
	text = {
		localisation_key = string_el_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "The [false] consort" => "le [faux] consort / la [fausse] consort" (lower case / minuscule)
defined_text = {
	name = GetFauxFausseCons
	text = {
		localisation_key = string_faux_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_fausse_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[False] consort or not..." => "[Faux] consort / [Fausse] consort ou pas..." (upper case / majuscule)
defined_text = {
	name = GetFauxFausseConsCap
	text = {
		localisation_key = string_faux_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_fausse_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "The Consort's [wife/husband] is the ruler" => "L'[époux] de la consort est le dirigeant/L'[épouse] du consort est la dirigeante"
# Defines a character the opposite gender of the consort / Utilisé pour définir un personnage de sexe opposé à celui du ou de la consort
defined_text = {
	name = GetAntiEpouxEpouseCons
	text = {
		localisation_key = string_epouse_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_epoux_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "The Consort is the [daughter/son] of a great family" => "Le consort est le [fils] d'une grande famille/La consort est la [fille] d'une grande famille"
# Defines a character the opposite gender of the consort / Utilisé pour définir un personnage de sexe opposé à celui du ou de la consort
defined_text = {
	name = GetAntiFilsFilleCons
	text = {
		localisation_key = string_fille_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_fils_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "The consort is the ruler's [brother/sister]" => "La consort est la soeur du dirigeant/La consort est le frère de la dirigeante"
# Defines a character the opposite gender of the consort / Utilisé pour définir un personnage de sexe opposé à celui du ou de la consort
defined_text = {
	name = GetAntiFrereSoeurCons
	text = {
		localisation_key = string_soeur_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_frere_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[from him/her]" => "[de lui/d'elle]" (lower case / minuscule)
defined_text = {
	name = GetDeluiDelleCons
	text = {
		localisation_key = string_delui_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_delle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[From him/her]" => "[De lui/D'elle]" (upper case / majuscule)
defined_text = {
	name = GetDeluiDelleConsCap
	text = {
		localisation_key = string_delui_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_delle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}

#####################################################################################
###   New Court Flavour Advisors // Conseillers des nouveaux événements de cour   ###
#####################################################################################

#GetTitle of the correct advisor
defined_text = {
	name = GetEventAdvisorTitleMinus
	random = no
	
	text = {
		localisation_key = EventAdvisorTitleMinus.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	
	text = {
		localisation_key = EventAdvisorTitleMinus.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	
	text = {
		localisation_key = EventAdvisorTitleMinus.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}





# Ex: "So [he/she] tried" => "Aussi a-t-[il/elle] tenté de" (lower case / minuscule)
defined_text = {
	name = GetEventAdvisorIlElle
	random = no
	text = {
		localisation_key = EventAdvisorSheHe.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = EventAdvisorSheHe.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = EventAdvisorSheHe.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}
defined_text = {
	name = GetEventAdvisorIlElleCap
	random = no
	text = {
		localisation_key = EventAdvisorSheHeCap.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = EventAdvisorSheHeCap.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = EventAdvisorSheHeCap.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}


# Ex: "He saw [him/her]" => "Il [le/la] vit" (lower case / minuscule)
defined_text = {
	name = GetEventAdvisorLeLaF
	text = {
		localisation_key = EventAdvisorLeLaF.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = EventAdvisorLeLaF.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = EventAdvisorLeLaF.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}
# Ex: "Firing [him/her] would have been..." => "[Le/La] renvoyer aurait été..." (upper case / majuscule)
defined_text = {
	name = GetEventAdvisorLeLaFCap
	text = {
		localisation_key = EventAdvisorLeLaFCap.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = EventAdvisorLeLaFCap.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = EventAdvisorLeLaFCap.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}


# Ex: "As for [him/her]" => "Quant à [lui/elle]" (lower case / minuscule)
defined_text = {
	name = GetEventAdvisorLuiElle
	text = {
		localisation_key = EventAdvisorHerHim.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = EventAdvisorHerHim.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = EventAdvisorHerHim.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}
# Ex: "[Him/Her] is..." => "[Lui/Elle] est..." (upper case / majuscule)
defined_text = {
	name = GetEventAdvisorLuiElleCap
	text = {
		localisation_key = EventAdvisorHerHimCap.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = EventAdvisorHerHimCap.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = EventAdvisorHerHimCap.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}


# Ex: "That [him/her]" => "[que lui/qu'elle]" (lower case / minuscule)
defined_text = {
	name = GetEventAdvisorQueluiQuelle
	random = no
	text = {
		localisation_key = EventAdvisorQueluiQuelle.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = EventAdvisorQueluiQuelle.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = EventAdvisorQueluiQuelle.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}
# Ex: "That [him/her]" => "[Que lui/Qu'elle]" (upper case / majuscule)
defined_text = {
	name = GetEventAdvisorQueluiQuelleCap
	random = no
	text = {
		localisation_key = EventAdvisorQueluiQuelleCap.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = EventAdvisorQueluiQuelleCap.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = EventAdvisorQueluiQuelleCap.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}


# Ex: "next treasurer" => "prochain[ø/e] trésorier/ère"
defined_text = {
	name = GetEventAdvisorXE
	random = no
	text = {
		localisation_key = EventAdvisorXE.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = EventAdvisorXE.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = EventAdvisorXE.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}


# Ex: "such a treasurer" => "un(e) t[el/elle] trésorier/ère"
defined_text = {
	name = GetEventAdvisorElElleF
	random = no
	text = {
		localisation_key = EventAdvisorElElle.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = EventAdvisorElElle.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = EventAdvisorElElle.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}


# Ex: "(s)he is a brilliant [man/woman]" => "c'est un(e) [homme/femme] brillant(e)"
defined_text = {
	name = GetEventAdvisorManWoman
	random = no
	text = {
		localisation_key = GetEventAdvisorManWoman.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = GetEventAdvisorManWoman.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = GetEventAdvisorManWoman.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}


# Ex: "this is a brilliant advisor" => "c'est un(e) exellent(e) conseill[er/ere]"
defined_text = {
	name = GetEventAdvisorErEre
	random = no
	text = {
		localisation_key = GetEventAdvisorErEre.A
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = GetEventAdvisorErEre.D
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = GetEventAdvisorErEre.M
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}

#####################################################
###   Nation Articles // Articles pour les pays   ###
#####################################################

### Ex: "Portugal/France/Austria/Hamburg/Aztecs" => "[le] Portugal/[la] France/[l']Autriche/[Ø] Hambourg/[les] Aztèques" (lower case / minuscule)
defined_text = {
	name = GetLeLaNP
	text = {
		localisation_key = string_le_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Portugal/France/Austria/Hamburg/Aztecs" => "[Le] Portugal/[La] France/[L']Autriche/[Ø] Hambourg/[Les] Aztèques" (upper case / majuscule)
defined_text = {
	name = GetLeLaNPCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Destroy [them]" => "le détruire (le Danemark)/la détruire (la Suède)/les détruire (les Provinces-Unies)" (lower case / minuscule)
defined_text = {
	name = GetLeLaFNP
	text = {
		localisation_key = string_le_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Destroy [them]" => "Le détruire (le Danemark)/La détruire (la Suède)/Les détruire (les Provinces-Unies)" (upper case / majuscule)
defined_text = {
	name = GetLeLaFNPCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "We have to attack [them]." => "Nous devons [l']attaquer (le Danemark). // Nous devons [les] attaquer (les Provinces-Unies)." (lower case / minuscule)
defined_text = {
	name = GetLLesFNP
	text = {
		localisation_key = string_l_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Attack [them] is essential." => "[L']attaquer est vital (le Danemark). // [Les] attaquer est vital (les Provinces-Unies)." (upper case / majuscule)
defined_text = {
	name = GetLLesFNPCap
	text = {
		localisation_key = string_l_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[our] ennemies" => "no[tre] ennemi (le Danemark)/no[tre] ennemie (la Suède)/no[s] ennemis (les USA)/no[s] ennemies (les Provinces-Unies)"
defined_text = {
	name = GetTreSNP
	text = {
		localisation_key = string_tre_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[in] Portugal/[in] France/[in] Austria/[in] Hamburg/[in] Aztecs" => "[au] Portugal/[en] France/[en] Autriche/[à] Hambourg/[chez les] Aztèques" (lower case / minuscule)
defined_text = {
	name = GetAuEnNP
	text = {
		localisation_key = string_au_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[In] Portugal/[In] France/[In] Austria/[In] Hamburg/[In] Aztecs" => "[Au] Portugal/[En] France/[En] Autriche/[À] Hambourg/[Chez les] Aztèques" (upper case / majuscule)
defined_text = {
	name = GetAuEnNPCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[for] Portugal/France/Austria/Hamburg/Aztecs" => "[au] Portugal/[à la] France/[à l']Autriche/[à] Hambourg/[aux] Aztèques" (lower case / minuscule)
defined_text = {
	name = GetAuAlaNP
	text = {
		localisation_key = string_au_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[For] Portugal/France/Austria/Hamburg/Aztecs" => "[Au] Portugal/[À la] France/[À l']Autriche/[À] Hambourg/[Aux] Aztèques" (upper case / majuscule)
defined_text = {
	name = GetAuAlaNPCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
#### Ex: "King [of/from] Portugal/[of/from] France/[of/from] Austria/[of/from] Hamburg/[of/from] Aztecs" => "roi [du] Portugal/[de] France/[d']Autriche/[de] Hambourg/[des] Aztèques" (lower case / minuscule)
defined_text = {
	name = GetDuDeNP
	text = {
		localisation_key = string_du_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
# Ex: "King [Of/From] Portugal/[Of/From] France/[Of/From] Austria/[Of/From] Hamburg/[Of/From] Aztecs" => "[Du] Portugal/[De] France/[D']Autriche/[De] Hambourg/[Des] Aztèques est venue la victoire." (upper case / majuscule)
defined_text = {
	name = GetDuDeNPCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
#### Ex: "Enemies [of/from] Portugal/France/Austria/Hamburg/Aztecs" => "les ennemis [du] Portugal/[de la] France/[de l']Autriche/[de] Hambourg/[des] Aztèques" (lower case / minuscule)
defined_text = {
	name = GetDuDelaNP
	text = {
		localisation_key = string_du_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
#### Ex: "[Of/from] Portugal/[France/Austria/Hamburg/Aztecs came..." => "[Du] Portugal/[De la] France/[De l']Autriche/[De] Hambourg/[Des] Aztèques est venu..." (upper case / majuscule)
defined_text = {
	name = GetDuDelaNPCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
#### Ex: "Enemies [of the] rivals (= Portugal/France/Aztecs)" => "Les ennemis [du] rival (= le Portugal) /[de la] rivale (= la France) / [des] rivaux (= les Aztèques)" (lower case / minuscule)
defined_text = {
	name = GetDuDelaFNP
	text = {
		localisation_key = string_du_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
#### Ex: "[Of the] rivals (= Portugal/FranceAztecs) came a message..." => "[Du] rival (= le Portugal) /[De la] rivale (= la France) / [Des] rivaux (= les Aztèques) est arrivé un message..." (upper case / majuscule)
defined_text = {
	name = GetDuDelaFNPCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/France/United Provinces/USA being vainquished..." => "le Danemark vaincu[ø]/la Suède vaincu[e]/les Provinces-Unies vaincu[es]/les USA vaincu[s]"
defined_text = {
	name = GetXENP
	text = {
		localisation_key = string_XX_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/France/United Provinces/USA should come first" => "le Danemark est le premi[er]/la Suède est la premi[ère]/les Provinces-Unies sont les premi[ères]/les USA sont les premi[ers]"
defined_text = {
	name = GetErEreNP
	text = {
		localisation_key = string_er_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "our [rival] of Denmark/Sweden/USA/Flanders" => "notre riv[al] le Danemark/notre riv[ale] la Suède/nos riv[aux] les États pontificaux/nos riv[ales] les Flandres"
defined_text = {
	name = GetAlAleNP
	text = {
		localisation_key = string_al2_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "our [former] ennemies" => "notre ancie[n] ennemi (le Danemark)/notre ancien[ne] ennemie (la Suède)/nos ancie[ns] ennemis (les USA)/nos ancie[nnes] ennemies (les Provinces-Unies)"
defined_text = {
	name = GetNNneNP
	text = {
		localisation_key = string_n_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/USA/Sweden/United Provinces is victorious." => "Le Danemark/Les USA est/sont victori[eux]. / La Suède est victori[euse]. // Les Provinces-Unies sont victori[euses]."
defined_text = {
	name = GetEuxEuseNP
	text = {
		localisation_key = string_eux_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/France/United Provinces/USA are on the verge of..." => "le Danemark/la Suède est proch[e] de.../les Provinces-Unies/USA sont proch[es] de..."
defined_text = {
	name = GetEEsNP
	text = {
		localisation_key = string_e_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Is Denmark/France... // Are United Provinces/USA..." => "Le Danemark est-[il].../La Suède est-[elle].../Les Provinces-Unies sont-[elles].../les USA sont-[ils]..." (lower case / minuscule)
defined_text = {
	name = GetIlElleNP
	text = {
		localisation_key = string_il_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/France is // United Provinces/USA are..." => "[Il] est (= le Danemark)/[Elle] est (= la Suède)/[Elles] sont (= les Provinces-Unies)/[Ils] sont (= les USA)" (upper case / majuscule)
defined_text = {
	name = GetIlElleNPCap
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "if (Denmark/France) is... // if (United Provinces/USA) are..." => "[s'il] est (= le Danemark)/[si elle] est (= la Suède)/[si elles] sont (= les Provinces-Unies)/[s'ils] sont (= les USA)" (lower case / minuscule)
defined_text = {
	name = GetSilSielleNP
	text = {
		localisation_key = string_sil_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "If (Denmark/France) is... // If (United Provinces/USA) are..." => "[S'il] est (= le Danemark)/[Si elle] est (= la Suède)/[Si elles] sont ( = les Provinces-Unies)/[S'ils] sont ( = les USA)" (upper case / majuscule)
defined_text = {
	name = GetSilSielleNPCap
	text = {
		localisation_key = string_sil_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "as for Denmark/Sweden/USA/Flanders..." => "Le Danemark, [lui], ... / La Suède, [elle], ... / les USA, [eux], ... / les Provinces-Unies, [elles], ..." (lower case / minuscule)
defined_text = {
	name = GetLuiElleNP
	text = {
		localisation_key = string_lui_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "As for Denmark/Sweden/USA/Flanders..." => "[Lui], le Danemark... / [Elle], la Suède... / [Eux], les USA... / [Elles), les Provinces-Unies..." (upper case / majuscule)
defined_text = {
	name = GetLuiElleNPCap
	text = {
		localisation_key = string_lui_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "It made [them] the overlords of... (= Denmark/Sweden/USA/Flanders)" => "Cela a fait [de lui] (= le Danemark]/[d'elle] (= la Suède)/[d'eux] (= les USA)/[d'elles] (= les Provinces-Unies)" (lower case / minuscule)
defined_text = {
	name = GetDeluiDelleNP
	text = {
		localisation_key = string_delui_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[From them] came threats... (= Denmark/Sweden/USA/Flanders)" => "[De lui] (= le Danemark]/[D'elle] (= la Suède)/[D'eux] (= les USA)/[D'elles] (= les Provinces-Unies) sont venus des menaces" (upper case / majuscule)
defined_text = {
	name = GetDeluiDelleNPCap
	text = {
		localisation_key = string_delui_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "X sends [them] troops" => "X [lui] envoie des troupes (France)/X [leur] envoie des troupes (USA)" (lower case / minuscule)
defined_text = {
	name = GetLuiLeurNP
	text = {
		localisation_key = string_lui_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Sending [them] troops" => "[Lui] envoyer des troupes (France)/[Leur] envoyer des troupes (USA)" (upper case / majuscule)
defined_text = {
	name = GetLuiLeurNPCap
	text = {
		localisation_key = string_lui_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "France/USA [is/are]..." => "le Danemark [est]/les USA [sont]" (lower case / minuscule)
defined_text = {
	name = GetEstSontNP
	text = {
		localisation_key = string_est_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[Is/Are] France/USA...?" => "[Est]-ce la France...?/[Sont]-ce les USA...?" (upper case / majuscule)
defined_text = {
	name = GetEstSontNPCap
	text = {
		localisation_key = string_est_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "France/USA [isn't/aren't]..." => "le Danemark [n'est] pas/les USA [ne sont] pas" (lower case / minuscule)
defined_text = {
	name = GetNestNesontNP
	text = {
		localisation_key = string_nest_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[Isn't/Aren't] France/USA...?" => "N'est-elle pas (la France) ?/[Ne sont]-ils pas (les USA)?" (upper case / majuscule)
defined_text = {
	name = GetNestNesontNPCap
	text = {
		localisation_key = string_nest_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "France/USA [decided]..." => "le Danemark [s'est] décidé/les USA [se sont] décidés..." (lower case / minuscule)
defined_text = {
	name = GetSestSesontNP
	text = {
		localisation_key = string_sest_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[Have] France/USA decided...?" => "[S'est]-elle décidée... ? / [Se sont]-ils décidés... ?" (upper case / majuscule)
defined_text = {
	name = GetSestSesontNPCap
	text = {
		localisation_key = string_sest_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Among all, France/USA are..." => "De tous, [c'est] le Danemark qui... / De tous, [ce sont] les USA qui..." (lower case / minuscule)
defined_text = {
	name = GetCestCesontNP
	text = {
		localisation_key = string_cest_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[It is] France/USA that..." => "[C'est] le Danemark qui... / [Ce sont] les USA qui..." (upper case / majuscule)
defined_text = {
	name = GetCestCesontNPCap
	text = {
		localisation_key = string_cest_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "France/USA [has/have]..." => "le Danemark [a].../les USA [ont]..." (lower case / minuscule)
defined_text = {
	name = GetAOntNP
	text = {
		localisation_key = string_a_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[Has/Have] France/USA...?" => "[A]-t-elle...?/[Ont]-ils...?" (upper case / majuscule)
defined_text = {
	name = GetAOntNPCap
	text = {
		localisation_key = string_a_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/USA [make] promises to..." => "le Danemark [fait] / les USA [font] des promesses..." (lower case / minuscule)
defined_text = {
	name = GetFaitFontNP
	text = {
		localisation_key = string_fait_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[Does] Denmark/USA make promises?" => "[Fait]-il des promesses? (= le Danemark) / [Font]-ils des promesses ? (= les USA)" (upper case / majuscule)
defined_text = {
	name = GetFaitFontNPCap
	text = {
		localisation_key = string_fait_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[its]/[their] vassalty (= France/USA)" => "[son/leur] lien de vassalité (= France/USA)" (lower case / minuscule)
defined_text = {
	name = GetSonLeurNP
	text = {
		localisation_key = string_son_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[Its]/[Their] vassalty (= France/USA)" => "[Son/Leur] lien de souveraineté (= France/USA)" (upper case / majuscule)
defined_text = {
	name = GetSonLeurNPCap
	text = {
		localisation_key = string_son_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[its]/[their] sovereignty (= France/USA)" => "[son/leur] souveraineté (= France/USA)" (lower case / minuscule)
defined_text = {
	name = GetSaLeurNP
	text = {
		localisation_key = string_sa_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[Its]/[Their] sovereignty (= France/USA)" => "[Son/Leur] souveraineté (= France/USA)" (upper case / majuscule)
defined_text = {
	name = GetSaLeurNPCap
	text = {
		localisation_key = string_sa_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[its]/[their] colonies (= France/USA)" => "[ses/leurs] colonies (= France/USA)" (lower case / minuscule)
defined_text = {
	name = GetSesLeursNP
	text = {
		localisation_key = string_ses_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[Its]/[Their] colonies (= France/USA)" => "[Ses/Leurs] colonies (= France/USA)" (upper case / majuscule)
defined_text = {
	name = GetSesLeursNPCap
	text = {
		localisation_key = string_ses_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[his]/[hers]/[theirs] (= France/USA)" => "le rang qui est le [sien/leur] (= à la France/aux USA)" (lower case / minuscule)
defined_text = {
	name = GetSienLeurNP
	text = {
		localisation_key = string_sien_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[His]/[Hers]/[Theirs] or not, ... (= France/USA)" => "[Sien/Leur] ou pas, ... (= à la France/aux USA)" (upper case / majuscule)
defined_text = {
	name = GetSienLeurNPCap
	text = {
		localisation_key = string_sien_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[his]/[hers]/[theirs] (= France/USA)" => "l'ambition qui est la [sienne/leur] (= à la France/aux USA)" (lower case / minuscule)
defined_text = {
	name = GetSienneLeurNP
	text = {
		localisation_key = string_sienne_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[His]/[Hers]/[Theirs] or not, ... (= France/USA)" => "[Sienne/Leur] ou pas, ... (= à la France/aux USA)" (upper case / majuscule)
defined_text = {
	name = GetSienneLeurNPCap
	text = {
		localisation_key = string_sienne_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[his]/[hers]/[theirs] (= France/USA)" => "les territoires qui sont les [siens/leurs] (= à la France/aux USA)" (lower case / minuscule)
defined_text = {
	name = GetSiensLeursNP
	text = {
		localisation_key = string_siens_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[His]/[Hers]/[Theirs] or not, ... (= France/USA)" => "[Siens/Leurs] ou pas, ... (= à la France/aux USA)" (upper case / majuscule)
defined_text = {
	name = GetSiensLeursNPCap
	text = {
		localisation_key = string_siens_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[his]/[hers]/[theirs] (= France/USA)" => "les ambitions qui sont les [siennes/leurs] (= à la France/aux USA)" (lower case / minuscule)
defined_text = {
	name = GetSiennesLeursNP
	text = {
		localisation_key = string_siennes_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "[His]/[Hers]/[Theirs] or not, ... (= France/USA)" => "[Siennes/Leurs] ou pas, ... (= à la France/aux USA)" (upper case / majuscule)
defined_text = {
	name = GetSiennesLeursNPCap
	text = {
		localisation_key = string_siennes_cap_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/USA lead[s/ø]..." => "que le Danemark soi[t] / que les USA soi[ent]" (lower case / minuscule)
defined_text = {
	name = GetTEntNP
	text = {
		localisation_key = string_t_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/USA [may]..." => "Le Danemark peu[t] / Les USA peu[vent]" (lower case / minuscule)
defined_text = {
	name = GetTVentNP
	text = {
		localisation_key = string_t_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/USA [guarantee]..." => "Le Danemark garanti[t]... / Les USA garanti[ssent]..." (lower case / minuscule)
defined_text = {
	name = GetTSsentNP
	text = {
		localisation_key = string_t_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/USA [produces]..." => "Le Danemark produi[t]... / Les USA produi[sent]..." (lower case / minuscule)
defined_text = {
	name = GetTSentNP
	text = {
		localisation_key = string_t_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/USA [has/have] begun..." => "le Danemark vien[t].../les USA vien[nent]..."
defined_text = {
	name = GetTNentNP
	text = {
		localisation_key = string_t_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/USA decide[s/ø]..." => "le Danemark décid[e]/les USA décid[ent]" (lower case / minuscule)
defined_text = {
	name = GetEEntNP
	text = {
		localisation_key = string_e_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}
### Ex: "Denmark/USA claim[s/ø]..." => "le Danemark prétend[ø]/les USA prétend[ent]" (lower case / minuscule)
defined_text = {
	name = GetXEntNP
	text = {
		localisation_key = string_XX_FR
		trigger = {
			is_dynamic_tag = yes
		}
	}
}

#############################
###   Estates // Ordres   ###
#############################

# Ex: "[Clergy]" => "les [clercs]" (lower case / minuscule)
defined_text = {
	name = GetClercs
	random = no
	### Usual cases / cas habituels ###
	text = {
		localisation_key = string_monasteries_FR
		trigger = {
			has_estate = estate_priests
		}
	}
	text = {
		localisation_key = string_church_FR
		trigger = {
			has_estate = estate_priests
		}
	}
}

# Ex: "[Brahmins]" => "les [brahmanes]" (lower case / minuscule)
defined_text = {
	name = GetBrahmanes
	random = no
	text = {
		localisation_key = string_brahmins_FR
		trigger = {
			has_estate = estate_mages
		}
	}
	text = { # Fallback (also better than GetBrahminsOrFallbackName)
		localisation_key = string_brahmins_FR
		trigger = {
			NOT = { has_estate = estate_mages }
		}
	}
}

# Ex: "[Nobility]" => "les [nobles]" (lower case / minuscule)
defined_text = {
	name = GetNobles
	random = no
	text = {
		localisation_key = string_nobles_FR
		trigger = {
			has_estate = estate_nobility
		}
	}
	text = {
		localisation_key = string_nobles_FR
		trigger = {
			NOT = { has_estate = estate_nobility }
		}
	}
}

# Ex: "[Marathas]" => "les [Marathes]" (upper case / majuscule)
defined_text = {
	name = GetMarathes
	random = no
	text = {
		localisation_key = string_maratha_FR
		trigger = {
			has_estate = estate_maratha
		}
	}
	text = { # Fallback (also better than GetMarathaOrFallbackName)
		localisation_key = string_maratha_FR
		trigger = {
			NOT = { has_estate = estate_maratha }
		}
	}
}

# Ex: "[Rajput]" => "les [Râjpoutes]" (upper case / majuscule)
defined_text = {
	name = GetRajpoutes
	random = no
	text = {
		localisation_key = string_rajput_estate_FR
		trigger = {
			has_estate = estate_warriors
		}
	}
	text = { # Fallback (also better than GetRajputOrFallbackName)
		localisation_key = string_rajput_estate_FR
		trigger = {
			NOT = { has_estate = estate_warriors }
		}
	}
}

# Ex: "[Burghers]" => "les [bourgeois]" (lower case / minuscule)
defined_text = {
	name = GetBourgeois
	random = no
	text = {
		localisation_key = string_burghers_FR
		trigger = {
			has_estate = estate_burghers
		}
	}
	text = {
		localisation_key = string_burghers_FR
		trigger = {
			NOT = { has_estate = estate_burghers }
		}
	}
}

# Ex: "[Vaishyas]" => "les [vaishyas]" (lower case / minuscule)
defined_text = {
	name = GetVaishyas
	random = no
	text = {
		localisation_key = string_vaisyas_FR
		trigger = {
			has_estate = estate_merchants
		}
	}
	text = { # Fallback (also better than GetVaisyasOrFallbackName)
		localisation_key = string_vaisyas_FR
		trigger = {
			NOT = { has_estate = estate_merchants }
		}
	}
}

# Ex: "[Cossacks]" => "les [cosaques]" (lower case / minuscule)
defined_text = {
	name = GetCosaques
	random = no
	text = {
		localisation_key = string_cossacks_FR
		trigger = {
			has_estate = estate_cossacks
		}
	}
	text = { # Fallback (also better than GetCossacksOrFallbackName)
		localisation_key = string_cossacks_FR
		trigger = {
			NOT = { has_estate = estate_cossacks }
		}
	}
}

# Ex: "[Tribes]" => "les [tribus]" (lower case / minuscule)
defined_text = {
	name = GetTribus
	random = no
	text = {
		localisation_key = string_nomadic_tribes_FR
		trigger = {
			has_estate = estate_nomadic_tribes
		}
	}
	text = { # Fallback (also better than GetTribesOrFallbackName)
		localisation_key = string_nomadic_tribes_FR
		trigger = {
			NOT = { has_estate = estate_nomadic_tribes }
		}
	}
}

# Ex: "The [Churcs]/[Brahmins]/[Clerics]" => "les [clers]/[brahmanes]/[clers]" (lower case / minuscule)
defined_text = {
	name = GetClercsOuBrahmanesN
	text = {
		localisation_key = string_ClercsOuBrahmanes_FR
		trigger = {
			has_estate = estate_priests
		}
	}
	text = {
		localisation_key = string_BrahmanesOuClercs_FR
		trigger = {
			has_estate = estate_mages
		}
	}
	text = {
		localisation_key = string_ClercsOuBrahmanes_FR # Fallback
		trigger = {
			NOT = { has_estate = estate_priests }
			NOT = { has_estate = estate_mages }
		}
	}
}

# Ex: "The [Tribes]/[Cossacks]/[troops]" => "les [tribus]/[cosaques]/[troupes]" (lower case / minuscule)
defined_text = {
	name = GetTribusOuCosaquesN
	text = {
		localisation_key = string_nomadic_tribes_FR
		trigger = {
			has_estate = estate_nomadic_tribes
		}
	}
	text = {
		localisation_key = string_cossacks_FR
		trigger = {
			has_estate = estate_cossacks
		}
	}
	text = {
		localisation_key = string_troops_FR # Fallback
		trigger = {
			NOT = { has_estate = estate_nomadic_tribes }
			NOT = { has_estate = estate_cossacks }
		}
	}
}
# Ex: "[They] want more loot (= the Tribes/Cossacks/troops)" => "[ils/elles] veulent davantage de butin (= les tribus/cosaques/troupes)" (lower case / minuscule)
defined_text = {
	name = GetTribusOuCosaquesIlsElles
	text = {
		localisation_key = string_elles_FR
		trigger = {
			OR = {
				has_estate = estate_nomadic_tribes
				AND = {
					NOT = { has_estate = estate_nomadic_tribes }
					NOT = { has_estate = estate_cossacks }
				}
			}
		}
	}
	text = {
		localisation_key = string_ils_FR
		trigger = {
			has_estate = estate_cossacks
		}
	}
}

# Ex: "[Dhimmi]" => "les [dhimmî]" (lower case / minuscule)
defined_text = {
	name = GetDhimmi
	random = no
	text = {
		localisation_key = string_dhimmi_FR
		trigger = {
			has_estate = estate_dhimmi
		}
	}
	text = { # Fallback (also better than GetDhimmiOrFallbackName)
		localisation_key = string_dhimmi_FR
		trigger = {
			NOT = { has_estate = estate_dhimmi }
		}
	}
}
# Ex: "[Jains]" => "les [jaïns]" (lower case / minuscule)
defined_text = {
	name = GetJains
	random = no
	text = {
		localisation_key = string_jains_FR
		trigger = {
			has_estate = estate_commoners
		}
	}
	text = { # Fallback (also better than GetJainsOrFallbackName)
		localisation_key = string_jains_FR
		trigger = {
			NOT = { has_estate = estate_commoners }
		}
	}
}

# Ex: "[Burghers] hold the power" => "les [bourgeois] détiennent le pouvoir" (lower case / minuscule)
defined_text = {
	name = GetOrdreDuRegent
	random = no
	text = {
		localisation_key = string_church_FR_this
		trigger = {
			has_estate_led_regency = { estate = estate_priests }
		}
	}
	text = {
		localisation_key = string_brahmins_FR_this
		trigger = {
			has_estate_led_regency = { estate = estate_mages }
		}
	}
	text = {
		localisation_key = string_nobles_FR_this
		trigger = {
			has_estate_led_regency = { estate = estate_nobility }
		}
	}
	text = {
		localisation_key = string_maratha_FR_this
		trigger = {
			has_estate_led_regency = { estate = estate_maratha }
		}
	}
	text = {
		localisation_key = string_rajput_estate_FR_this
		trigger = {
			has_estate_led_regency = { estate = estate_warriors }
		}
	}
	text = {
		localisation_key = string_burghers_FR_this
		trigger = {
			has_estate_led_regency = { estate = estate_burghers }
		}
	}
	text = {
		localisation_key = string_vaisyas_FR_this
		trigger = {
			has_estate_led_regency = { estate = estate_merchants }
		}
	}
	text = {
		localisation_key = string_cossacks_FR_this
		trigger = {
			has_estate_led_regency = { estate = estate_cossacks }
		}
	}
	text = {
		localisation_key = string_nomadic_tribes_FR_this
		trigger = {
			has_estate_led_regency = { estate = estate_nomadic_tribes }
		}
	}
	text = {
		localisation_key = string_dhimmi_FR_this
		trigger = {
			has_estate_led_regency = { estate = estate_dhimmi }
		}
	}
	text = {
		localisation_key = string_jains_FR_this
		trigger = {
			has_estate_led_regency = { estate = estate_commoners }
		}
	}
}

# Ex: "[Burghers] have 70% of influence" => "Les [bourgeois] ont 70% d'influence" (lower case / minuscule)
defined_text = {
	name = GetOrdre70i
	random = no
	text = {
		localisation_key = string_church_FR_this
		trigger = {
			estate_influence = {
				estate = estate_priests
				influence = 70
			}
		}
	}
	text = {
		localisation_key = string_brahmins_FR_this
		trigger = {
			estate_influence = {
				estate = estate_mages
				influence = 70
			}
		}
	}
	text = {
		localisation_key = string_nobles_FR_this
		trigger = {
			estate_influence = {
				estate = estate_nobility
				influence = 70
			}
		}
	}
	text = {
		localisation_key = string_maratha_FR_this
		trigger = {
			estate_influence = {
				estate = estate_maratha
				influence = 70
			}
		}
	}
	text = {
		localisation_key = string_rajput_estate_FR_this
		trigger = {
			estate_influence = {
				estate = estate_warriors
				influence = 70
			}
		}
	}
	text = {
		localisation_key = string_burghers_FR_this
		trigger = {
			estate_influence = {
				estate = estate_burghers
				influence = 70
			}
		}
	}
	text = {
		localisation_key = string_vaisyas_FR_this
		trigger = {
			estate_influence = {
				estate = estate_merchants
				influence = 70
			}
		}
	}
	text = {
		localisation_key = string_cossacks_FR_this
		trigger = {
			estate_influence = {
				estate = estate_cossacks
				influence = 70
			}
		}
	}
	text = {
		localisation_key = string_nomadic_tribes_FR_this
		trigger = {
			estate_influence = {
				estate = estate_nomadic_tribes
				influence = 70
			}
		}
	}
	text = {
		localisation_key = string_dhimmi_FR_this
		trigger = {
			estate_influence = {
				estate = estate_dhimmi
				influence = 70
			}
		}
	}
	text = {
		localisation_key = string_jains_FR_this
		trigger = {
			estate_influence = {
				estate = estate_commoners
				influence = 70
			}
		}
	}
}

# Ex: "[Burghers] have 70% of influence and less than 10 in loyalty" => "Les [bourgeois] ont 70% d'influence et moins de 10 en loyauté" (lower case / minuscule)
defined_text = {
	name = GetOrdre70i10l
	random = no
	text = {
		localisation_key = string_church_FR_this
		trigger = {
			AND = {
				estate_influence = {
					estate = estate_priests
					influence = 70
				}
				NOT = {
					estate_loyalty = {
						estate = estate_priests
						loyalty = 10
					}
				}
			}
		}
	}
	text = {
		localisation_key = string_brahmins_FR_this
		trigger = {
			AND = {
				estate_influence = {
					estate = estate_mages
					influence = 70
				}
				NOT = {
					estate_loyalty = {
						estate = estate_mages
						loyalty = 10
					}
				}
			}
		}
	}
	text = {
		localisation_key = string_nobles_FR_this
		trigger = {
			AND = {
				estate_influence = {
					estate = estate_nobility
					influence = 70
				}
				NOT = {
					estate_loyalty = {
						estate = estate_nobility
						loyalty = 10
					}
				}
			}
		}
	}
	text = {
		localisation_key = string_maratha_FR_this
		trigger = {
			AND = {
				estate_influence = {
					estate = estate_maratha
					influence = 70
				}
				NOT = {
					estate_loyalty = {
						estate = estate_maratha
						loyalty = 10
					}
				}
			}
		}
	}
	text = {
		localisation_key = string_rajput_estate_FR_this
		trigger = {
			AND = {
				estate_influence = {
					estate = estate_warriors
					influence = 70
				}
				NOT = {
					estate_loyalty = {
						estate = estate_warriors
						loyalty = 10
					}
				}
			}
		}
	}
	text = {
		localisation_key = string_burghers_FR_this
		trigger = {
			AND = {
				estate_influence = {
					estate = estate_burghers
					influence = 70
				}
				NOT = {
					estate_loyalty = {
						estate = estate_burghers
						loyalty = 10
					}
				}
			}
		}
	}
	text = {
		localisation_key = string_vaisyas_FR_this
		trigger = {
			AND = {
				estate_influence = {
					estate = estate_merchants
					influence = 70
				}
				NOT = {
					estate_loyalty = {
						estate = estate_merchants
						loyalty = 10
					}
				}
			}
		}
	}
	text = {
		localisation_key = string_cossacks_FR_this
		trigger = {
			AND = {
				estate_influence = {
					estate = estate_cossacks
					influence = 70
				}
				NOT = {
					estate_loyalty = {
						estate = estate_cossacks
						loyalty = 10
					}
				}
			}
		}
	}
	text = {
		localisation_key = string_nomadic_tribes_FR_this
		trigger = {
			AND = {
				estate_influence = {
					estate = estate_nomadic_tribes
					influence = 70
				}
				NOT = {
					estate_loyalty = {
						estate = estate_nomadic_tribes
						loyalty = 10
					}
				}
			}
		}
	}
	text = {
		localisation_key = string_dhimmi_FR_this
		trigger = {
			AND = {
				estate_influence = {
					estate = estate_dhimmi
					influence = 70
				}
				NOT = {
					estate_loyalty = {
						estate = estate_dhimmi
						loyalty = 10
					}
				}
			}
		}
	}
	text = {
		localisation_key = string_jains_FR_this
		trigger = {
			AND = {
				estate_influence = {
					estate = estate_commoners
					influence = 70
				}
				NOT = {
					estate_loyalty = {
						estate = estate_commoners
						loyalty = 10
					}
				}
			}
		}
	}
}

############################################
###   Trade Goods // Biens commerciaux   ###
############################################

### Ex: "wine" => "le [vin]" (lower case / minuscule)
defined_text = {
	name = GetBC
	text = {
		localisation_key = string_wine_FR
		trigger = { trade_goods = wine }
	}
	text = {
		localisation_key = string_fish_FR
		trigger = { trade_goods = fish }
	}
	text = {
		localisation_key = string_salt_FR
		trigger = { trade_goods = salt }
	}
	text = {
		localisation_key = string_copper_FR
		trigger = { trade_goods = copper }
	}
	text = {
		localisation_key = string_iron_FR
		trigger = { trade_goods = iron }
	}
	text = {
		localisation_key = string_wool_FR
		trigger = { trade_goods = wool }
	}
	text = {
		localisation_key = string_silk_FR
		trigger = { trade_goods = silk }
	}
	text = {
		localisation_key = string_gold_FR
		trigger = { trade_goods = gold }
	}
	text = {
		localisation_key = string_ivory_FR
		trigger = { trade_goods = ivory }
	}
	text = {
		localisation_key = string_slaves_FR
		trigger = { trade_goods = slaves }
	}
	text = {
		localisation_key = string_cloth_FR
		trigger = { trade_goods = cloth }
	}
	text = {
		localisation_key = string_fur_FR
		trigger = { trade_goods = fur }
	}
	text = {
		localisation_key = string_naval_supplies_FR
		trigger = { trade_goods = naval_supplies }
	}
	text = {
		localisation_key = string_dyes_FR
		trigger = { trade_goods = dyes }
	}
	text = {
		localisation_key = string_livestock_FR
		trigger = { trade_goods = livestock }
	}
	text = {
		localisation_key = string_glass_FR
		trigger = { trade_goods = glass }
	}
	text = {
		localisation_key = string_paper_FR
		trigger = { trade_goods = paper }
	}
	text = {
		localisation_key = string_gems_FR
		trigger = { trade_goods = gems }
	}
	text = {
		localisation_key = string_coal_FR
		trigger = { trade_goods = coal }
	}
}

########################################
###   Manufactures // Manufactures   ###
########################################
#Copied from GetManufactory
#Prints the province's manufactory (if one is built)
###Ex: "The estates request the building of [a naval equipment manufactory] / [a trade station]." = "Les ordres demandent la construction d'[une manufacture navale] / d'[un comptoir commercial]." (= lower case/minuscule)
defined_text = {
	name = GetUnUneManufacture
	random = no
	text = {
		localisation_key = string_a_building_wharf_FR # manufacture navale
		trigger = {
			OR = {
				trade_goods = naval_supplies
				trade_goods = fish
				trade_goods = salt
				trade_goods = algae
				trade_goods = crabs
			}
		}
	}
	text = {
		localisation_key = string_a_building_weapons_FR # manufacture d'armes
		trigger = {
			OR = {
				trade_goods = copper
				trade_goods = iron
				trade_goods = weapons_and_armor
				trade_goods = corundum
				trade_goods = orichalcum
			}
		}
	}
	text = {
		localisation_key = string_a_building_textile_FR # manufacture textile
		trigger = {
			OR = {
				trade_goods = wool
				trade_goods = cloth
				trade_goods = silk
				trade_goods = dyes
				trade_goods = leather
			}
		}
	}
	text = {
		localisation_key = string_a_building_plantations_FR # plantation
		trigger = {
			OR = {
				trade_goods = moon_sugar
				trade_goods = herbs
				trade_goods = beer
			}
		}
	}
	text = {
		localisation_key = string_a_building_tradecompany_FR # comptoir commercial
		trigger = {
			OR = {
				trade_goods = ivory
				trade_goods = slaves
				trade_goods = fur
				trade_goods = corals
				trade_goods = pearls
			}
		}
	}
	text = {
		localisation_key = string_a_building_farm_estate_FR # domaine foncier
		trigger = {
			OR = {
				trade_goods = livestock
				trade_goods = wine
				trade_goods = crops
				trade_goods = fruits_and_vegetables
				trade_goods = mushrooms
			}
		}
	}
	text = {
		localisation_key = string_a_building_mills_FR # moulin
		trigger = {
			OR = {
				trade_goods = paper
				trade_goods = gems
				trade_goods = glass
				trade_goods = wood
				trade_goods = potions
			}
		}
	}
	text = {
		localisation_key = string_a_building_furnace_FR # fourneau
		trigger = {
			OR = {
				trade_goods = coal
				trade_goods = ebony
				trade_goods = stalhrim
				trade_goods = moonstone
				trade_goods = quicksilver 
				trade_goods = malachite
				trade_goods = silver 
			}
		}
	}
}

##############################################################
###   State Forms // Désignations des régimes politiques   ###
##############################################################
#When you need to refer a government/state
#In the future incorporate more special things here
###Ex: "It is [the] Council/Crown of X." = "C'est [le] Conseil/[la] Couronne de X." (= lower case/minuscule)
defined_text = {
	name = GetLeLaLRegime
	text = {
		localisation_key = string_la_FR
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = string_le_FR
		trigger = {
			government = republic
		}
	}
}
###Ex: "[The] Council/Crown of X" = "[Le] Conseil/[La] Couronne de X" (= upper case/majuscule)
defined_text = {
	name = GetLeLaLRegimeCap
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			government = republic
		}
	}
}



###Ex: "The order came [from the] Council/Crown of X." = "L'ordre est venu [du] Conseil/[de la] Couronne de X." (= lower case/minuscule)
defined_text = {
	name = GetDuDelaRegime
	text = {
		localisation_key = string_dela_FR
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = string_du_FR
		trigger = {
			government = republic
		}
	}
}
###Ex: "[From the] Council/Crown of X came this order..." = "[Du] Conseil/[De la] Couronne de X est venu l'ordre de..." (= upper case/majuscule)
defined_text = {
	name = GetDuDelaRegimeCap
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			government = republic
		}
	}
}



###Ex: "The order came [to the] Council/Crown of X." = "L'ordre est arrivé [au] Conseil/[à la] Couronne de X." (= lower case/minuscule)
defined_text = {
	name = GetAuAlaRegime
	text = {
		localisation_key = string_ala_FR
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = string_au_FR
		trigger = {
			government = republic
		}
	}
}
###Ex: "[To the] Council/Crown of X came this order..." = "[Au] Conseil/[À la] Couronne de X est venu l'ordre de..." (= upper case/majuscule)
defined_text = {
	name = GetAuAlaRegimeCap
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			government = republic
		}
	}
}



### Ex: "[l'État]/[la République]/[Dieu]/[la horde]/[la tribu], c'est moi" => "[l'État]/[la République]/[Dieu]/[la horde]/[la tribu], c'est moi"
defined_text = {
	name = GetLeLaTypeRegime
	text = {
		localisation_key = string_letat_FR
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = string_larepublique_FR
		trigger = {
			government = republic
		}
	}
	text = {
		localisation_key = string_Dieu_FR
		trigger = {
			government = theocracy
		}
	}
	text = {
		localisation_key = string_lahorde_FR
		trigger = {
			government = tribal
		}
	}
	text = {
		localisation_key = string_latribu_FR
		trigger = {
			government = native
		}
	}
}
### Ex: "[L'État]/[La République]/[Dieu]/[La horde]/[La tribu], c'est moi" => "[L'État]/[La République]/[Dieu]/[La horde]/[La tribu], c'est moi"
defined_text = {
	name = GetLeLaTypeRegimeCap
	text = {
		localisation_key = string_letat_cap_FR
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = string_larepublique_cap_FR
		trigger = {
			government = republic
		}
	}
	text = {
		localisation_key = string_Dieu_cap_FR
		trigger = {
			government = theocracy
		}
	}
	text = {
		localisation_key = string_lahorde_cap_FR
		trigger = {
			government = tribal
		}
	}
	text = {
		localisation_key = string_latribu_cap_FR
		trigger = {
			government = native
		}
	}
}

###########################################################################
###   Event Advisors (works out which via flag) // Conseillers (tous)   ###
###########################################################################

########Event advisors (uses flags to see which one is relevant and uses that to refer to the relevant custom loc listed above in the advisors section)

# Ex: "So [he/she] tried" => "Aussi a-t-[il/elle] tenté de" (lower case / minuscule)
defined_text = {
	name = GetIlElleEvent
	text = {
		localisation_key = string_GetIlElleAdm
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = string_GetIlElleDip
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = string_GetIlElleMil
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}
# Ex: "[He/She] tried" => "[Il/Elle] a tenté de" (upper case / majuscule)
defined_text = {
	name = GetIlElleEventCap
	text = {
		localisation_key = string_GetIlElleAdmCap
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = string_GetIlElleDipCap
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = string_GetIlElleMilCap
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}


# Ex: "As for [him/her]" => "Quant à [lui/elle]" (lower case / minuscule)
defined_text = {
	name = GetLuiElleEvent
	text = {
		localisation_key = string_GetLuiElleAdm
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = string_GetLuiElleDip
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = string_GetLuiElleMil
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}
# Ex: "[Him/Her] is..." => "[Lui/Elle] est..." (upper case / majuscule)
defined_text = {
	name = GetLuiElleEventCap
	text = {
		localisation_key = string_GetLuiElleAdmCap
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = string_GetLuiElleDipCap
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = string_GetLuiElleMilCap
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}


# Ex: "That [him/her]" => "[que lui/qu'elle]" (lower case / minuscule)
defined_text = {
	name = GetQueluiQuelleEvent
	text = {
		localisation_key = string_GetQueluiQuelleAdm
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = string_GetQueluiQuelleDip
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = string_GetQueluiQuelleMil
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}
# Ex: "That [him/her]" => "[Que lui/Qu'elle]" (upper case / majuscule)
defined_text = {
	name = GetQueluiQuelleEventCap
	text = {
		localisation_key = string_GetQueluiQuelleAdmCap
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = string_GetQueluiQuelleDipCap
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = string_GetQueluiQuelleMilCap
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}

# Ex: "He saw [him/her]" => "Il [le/la] vit" (lower case / minuscule)
defined_text = {
	name = GetLeLaFEvent
	text = {
		localisation_key = string_GetLeLaFAdm
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = string_GetLeLaFDip
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = string_GetLeLaFMil
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}
# Ex: "Firing [him/her] would have been..." => "[Le/La] renvoyer aurait été..." (upper case / majuscule)
defined_text = {
	name = GetLeLaFEventCap
	text = {
		localisation_key = string_GetLeLaFAdmCap
		trigger = {
			has_country_flag = advisor_events_adm
		}
	}
	text = {
		localisation_key = string_GetLeLaFDipCap
		trigger = {
			has_country_flag = advisor_events_dip
		}
	}
	text = {
		localisation_key = string_GetLeLaFMilCap
		trigger = {
			has_country_flag = advisor_events_mil
		}
	}
}

# Ex: "[the] treasurer" => "[le/la] financier/ère"
defined_text = {			
	name = GetLeLaLEvent		
	text = {		
		localisation_key = string_GetLeLaLAdm
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetLeLaLDip
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetLeLaLMil
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			

# Ex: "[The] treasurer" => "[Le/La] financier/ère"
defined_text = {			
	name = GetLeLaLEventCap		
	text = {		
		localisation_key = string_GetLeLaLAdmCap	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetLeLaLDipCap	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetLeLaLMilCap	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			


# Ex: "[this] treasurer" => "[ce/cette] financier/ère"
defined_text = {			
	name = GetCeCetteEvent		
	text = {		
		localisation_key = string_GetCeCetteAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetCeCetteDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetCeCetteMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			

# Ex: "[This] treasurer" => "[Ce/Cette] financier/ère"
defined_text = {			
	name = GetCeCetteEventCap		
	text = {		
		localisation_key = string_GetCeCetteAdmCap	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetCeCetteDipCap	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetCeCetteMilCap	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



# Ex: "[this] advisor" => "[ce/cette] conseiller" (lower case / minuscule)
# Mandatory use of masculine form "ce" for some situations / Emploi forcé de la forme masculine "ce" dans certains contextes
defined_text = {			
	name = GetCeCetteFEvent		
	text = {		
		localisation_key = string_GetCeCetteFAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetCeCetteFDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetCeCetteFMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			

# Ex: "[This] sick person" => "[Cet/Cette] consort" (upper case / majuscule)
# Mandatory use of masculine form "Ce" for some situations / Emploi forcé de la forme masculine "Ce" dans certains contextes
defined_text = {			
	name = GetCeCetteFEventCap		
	text = {		
		localisation_key = string_GetCeCetteFAdmCap	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetCeCetteFDipCap	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetCeCetteFMilCap	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



# Ex: "[this] (wo)man" => "[cet/cette] homme/femme" (lower case / minuscule)
# Mandatory use of masculine form "cet" for some situations / Emploi forcé de la forme masculine "cet" dans certains contextes
defined_text = {			
	name = GetCetCetteFEvent		
	text = {		
		localisation_key = string_GetCetCetteFAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetCetCetteFDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetCetCetteFMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			

# Ex: "[This] (wo)man" => "[Cet/Cette] homme/femme" (upper case / majuscule)
# Mandatory use of masculine form "Cet" for some situations / Emploi forcé de la forme masculine "Cet" dans certains contextes
defined_text = {			
	name = GetCetCetteFEventCap		
	text = {		
		localisation_key = string_GetCetCetteFAdmCap	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetCetCetteFDipCap	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetCetCetteFMilCap	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



# Ex: "[his] adviser" => "s[on] conseiller/s[a] conseillère"
defined_text = {			
	name = GetOnAEvent		
	text = {		
		localisation_key = string_GetOnAAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetOnADip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetOnAMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



# Ex: "[his] adviser" => "s[on] conseiller/s[a] conseillère"
defined_text = {			
	name = GetOnAFEvent		
	text = {		
		localisation_key = string_GetOnAFAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetOnAFDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetOnAFMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



# Ex: "[the one] which" => "[celui/celle] qui"
defined_text = {			
	name = GetCeluiCelleEvent		
	text = {		
		localisation_key = string_GetCeluiCelleAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetCeluiCelleDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetCeluiCelleMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			

# Ex: "[The one] which" => "[Celui/Celle] qui"
defined_text = {			
	name = GetCeluiCelleEventCap		
	text = {		
		localisation_key = string_GetCeluiCelleAdmCap	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetCeluiCelleDipCap	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetCeluiCelleMilCap	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			


# Ex: "[of the] advisor" => "[du] conseiller/[de la] conseillère"
defined_text = {			
	name = GetDuDelaEvent		
	text = {		
		localisation_key = string_GetDuDelaAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetDuDelaDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetDuDelaMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			

# Ex: "[Of the] advisor" => "[Du] conseiller/[De la] conseillère"
defined_text = {			
	name = GetDuDelaEventCap		
	text = {		
		localisation_key = string_GetDuDelaAdmCap	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetDuDelaDipCap	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetDuDelaMilCap	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



# Ex: "[of the] new advisor" => "[du] nouveau conseiller/[de la] nouvelle conseillère"
defined_text = {			
	name = GetDuDelaFEvent		
	text = {		
		localisation_key = string_GetDuDelaFAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetDuDelaFDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetDuDelaFMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			

# Ex: "[Of the] new advisor" => "[Du] nouveau conseiller/[De la] nouvelle conseillère"
defined_text = {			
	name = GetDuDelaFEventCap		
	text = {		
		localisation_key = string_GetDuDelaFAdmCap	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetDuDelaFDipCap	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetDuDelaFMilCap	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



# Ex: "[to the] treasurer" => "[au/à la] financier/ère"
defined_text = {			
	name = GetAuAlaEvent		
	text = {		
		localisation_key = string_GetAuAlaAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetAuAlaDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetAuAlaMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			

# Ex: "[To the] treasurer" => "[Au/À la] financier/ère"
defined_text = {			
	name = GetAuAlaEventCap		
	text = {		
		localisation_key = string_GetAuAlaAdmCap	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetAuAlaDipCap	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetAuAlaMilCap	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



# Ex: "[to the] treasurer" => "[au/à la] financier/ère"
defined_text = {			
	name = GetAuAlaFEvent		
	text = {		
		localisation_key = string_GetAuAlaFAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetAuAlaFDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetAuAlaFMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			

# Ex: "[To the] treasurer" => "[Au/À la] financier/ère"
defined_text = {			
	name = GetAuAlaFEventCap		
	text = {		
		localisation_key = string_GetAuAlaFAdmCap	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetAuAlaFDipCap	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetAuAlaFMilCap	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



# Ex: "[if] he/she" => "[s'il]/[si elle]" (lower case / minuscule)
defined_text = {			
	name = GetSilSielleEvent		
	text = {		
		localisation_key = string_GetSilSielleAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetSilSielleDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetSilSielleMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			

# Ex: "[If] he/she" => "[S'il]/[Si elle]" (upper case / majuscule)
defined_text = {				
	name = GetSilSielleEventCap			
	text = {			
		localisation_key = string_GetSilSielleAdmCap		
		trigger = {		
			has_country_flag = advisor_events_adm	
		}		
	}			
	text = {			
		localisation_key = string_GetSilSielleDipCap		
		trigger = {		
			has_country_flag = advisor_events_dip	
		}		
	}			
	text = {			
		localisation_key = string_GetSilSielleMilCap		
		trigger = {		
			has_country_flag = advisor_events_mil	
		}		
	}			
}				



# Ex: "next treasurer" => "prochain[ø/e] trésorier/ère"
defined_text = {			
	name = GetXEEvent		
	text = {		
		localisation_key = string_GetXEAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetXEDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetXEMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			


# Ex: "the first advisor" => "(le/la) premi[er/ère] conseill[er/ère]"
defined_text = {			
	name = GetErEreEvent		
	text = {		
		localisation_key = string_GetErEreAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetErEreDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetErEreMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



# Ex: "[new] advisor" => "nouv[eau/elle] conseiller/conseillère"
defined_text = {			
	name = GetEauElleEvent		
	text = {		
		localisation_key = string_GetEauElleAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetEauElleDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetEauElleMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



# Ex: "[Treasurer]" => "[financer/financière]" (lower case)
defined_text = {			
	name = GetEvent		
	text = {		
		localisation_key = string_GetAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			




# Ex: "[from him/her]" => "[de lui/d'elle]" (lower case / minuscule)
defined_text = {			
	name = GetDeluiDelleEvent		
	text = {		
		localisation_key = string_GetDeluiDelleAdm	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetDeluiDelleDip	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetDeluiDelleMil	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			

# Ex: "[From him/her]" => "[De lui/D'elle]" (upper case / majuscule)
defined_text = {			
	name = GetDeluiDelleEventCap		
	text = {		
		localisation_key = string_GetDeluiDelleAdmCap	
		trigger = {	
			has_country_flag = advisor_events_adm
		}	
	}		
	text = {		
		localisation_key = string_GetDeluiDelleDipCap	
		trigger = {	
			has_country_flag = advisor_events_dip
		}	
	}		
	text = {		
		localisation_key = string_GetDeluiDelleMilCap	
		trigger = {	
			has_country_flag = advisor_events_mil
		}	
	}		
}			



##########################################
###   Limited Uses // Usages limités   ###
##########################################

# Copied from GetLegitimacyOrMeritocracy
# Ex: "Restore legitimacy/meritocracy" => "Restaurer la [légitimité/méritocratie]" (lower case / minuscule)
defined_text = {
	name = GetLegitimacyOrMeritocracyFR
	random = no
	
	text = {
		localisation_key = string_meritocracy_FR
		trigger = {
			has_reform = celestial_empire
			has_dlc = "Mandate of Heaven"
		}
	}
	text = {
		localisation_key = string_legitimacy_FR
		trigger = {
			OR = {
				NOT = { has_reform = celestial_empire }
				NOT = { has_dlc = "Mandate of Heaven" }
			}
		}
	}
}