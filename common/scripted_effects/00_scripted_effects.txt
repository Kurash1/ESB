#Unsorted Scripted effects:

#General effect for extending or adding province modifier
#Province Scope
add_or_extend_province_modifier_effect = {
	if = {
		limit = {
			has_province_modifier = $MODIFIER$
		}
		extend_province_modifier = { name = $MODIFIER$ duration = $DURATION$ }
	}
	else = {
		add_province_modifier = { name = $MODIFIER$ duration = $DURATION$ }
	}
}

#Used in army professionalism event:
#used where FROM is a province and ROOT is a country, ie onaction for provinces fallen
add_loot_from_province_effect = { 
	if = {
		limit = {
			FROM = {
				NOT = { development = 18 }
			}
		}
		add_treasury = 115
		add_mil_power = 15
	}
	if = {
		limit = {
			FROM = {
				development = 18
				NOT = { development = 21 }
			}
		}
		add_treasury = 135
		add_mil_power = 15
	}
	if = {
		limit = {
			FROM = {
				development = 21
				NOT = { development = 24 }
			}
		}
		add_treasury = 155
		add_mil_power = 25
	}
	if = {
		limit = {
			FROM = {
				development = 24
				NOT = { development = 27 }
			}
		}
		add_treasury = 180
		add_mil_power = 30
	}
	if = {
		limit = {
			FROM = {
				development = 27
				NOT = { development = 30 }
			}
		}
		add_treasury = 210
		add_mil_power = 40
	}
	if = {
		limit = {
			FROM = {
				development = 30
				NOT = { development = 33 }
			}
		}
		add_treasury = 230
		add_mil_power = 50
	}
	if = {
		limit = {
			FROM = {
				development = 33
			}
		}
		add_treasury = 250
		add_mil_power = 55
	}
}

#Generalized version of the same effect, for use in province scope.
#used where ROOT is a province, ie onaction for provinces fallen
#$LOOTER$ is the scope of the tag performing the Looting (so for instance owner)
add_loot_from_rich_province_general_effect = { 
	add_devastation = 80
	remove_loot = {
		who = $LOOTER$
		amount = 1000
	}
	if = {
		limit = {
			NOT = { development = 18 }
		}
		$LOOTER$ = {
			add_treasury = 400
			add_mil_power = 15
		}
	}
	if = {
		limit = {
			development = 18
			NOT = { development = 21 }
		}
		$LOOTER$ = {
			add_treasury = 435
			add_mil_power = 15
		}
	}
	if = {
		limit = {
			development = 21
			NOT = { development = 24 }
		}
		$LOOTER$ = {
			add_treasury = 455
			add_mil_power = 25
		}
	}
	if = {
		limit = {
			development = 24
			NOT = { development = 27 }
		}
		$LOOTER$ = {
			add_treasury = 480
			add_mil_power = 30
		}
	}
	if = {
		limit = {
			development = 27
			NOT = { development = 30 }
		}
		$LOOTER$ = {
			add_treasury = 510
			add_mil_power = 40
		}
	}
	if = {
		limit = {
			development = 30
			NOT = { development = 33 }
		}
		$LOOTER$ = {
			add_treasury = 530
			add_mil_power = 50
		}
	}
	if = {
		limit = {
			development = 33
		}
		$LOOTER$ = {
			add_treasury = 550
			add_mil_power = 55
		}
	}
}

#Religious Schools:
#Country Scope
clear_religious_scholar_modifiers_effect = {
    remove_country_modifier = alrabeg_school_modifier
	remove_country_modifier = storihbeg_school_modifier
	remove_country_modifier = uricanbeg_school_modifier
	remove_country_modifier = gulibeg_school_modifier
	remove_country_modifier = hrokkibeg_school_modifier
	remove_country_modifier = dragon_school_modifier
	remove_country_modifier = lizard_school_modifier
	remove_country_modifier = tortoise_school_modifier
	remove_country_modifier = crocodile_school_modifier
	remove_country_modifier = viper_school_modifier
	remove_country_modifier = lotus_school_modifier
	remove_country_modifier = magnolia_school_modifier
	remove_country_modifier = rose_school_modifier
	remove_country_modifier = orchid_school_modifier
	remove_country_modifier = tulip_school_modifier
	remove_country_modifier = hagraven_school_modifier
    remove_country_modifier = tuatara_school_modifier
    remove_country_modifier = carnation_school_modifier	
}

#Move capital along with all that also needs to be done. Used in capital decisions.
#THIS = Province Scope, ROOT = Country Scope
move_capital_effect = {
	if = {
		limit = {
			is_part_of_hre = yes
			ROOT = {
				is_part_of_hre = no
			}
		}
		set_in_empire = no
		emperor = {
			add_opinion = {
				who = ROOT
				modifier = hre_province_left
			}
		}
		add_imperial_influence = -1
	}
	if = {
		limit = { is_capital = no }
		ROOT = {
			set_capital = PREV
		}
	}
}

#Same as move_capital_effect, but for when you want to move PREV's rather than ROOT's capital
#THIS = Province Scope, PREV = Country Scope
prev_move_capital_effect = {
	if = {
		limit = {
			is_part_of_hre = yes
			PREV = {
				is_part_of_hre = no
			}
		}
		set_in_empire = no
		PREV = {
			emperor = {
				add_opinion = {
					who = PREV
					modifier = hre_province_left
				}
			}
		}
		add_imperial_influence = -1
	}
	if = {
		limit = { is_capital = no }
		PREV = {
			set_capital = PREV
		}
	}
}

remove_non_electors_emperors_from_empire_effect = {
	if = {
		limit = {
			is_part_of_hre = yes
			is_elector = no
			is_emperor = no
		}
		custom_tooltip = remove_non_electors_emperors_from_empire_effect_tooltip
		hidden_effect = {
			every_owned_province = {
				limit = {
					is_part_of_hre = yes
				}
				set_in_empire = no
			}
		}
	}
}

abolish_slavery_effect = {
	custom_tooltip = abolished_slavery_act_tooltip
	hidden_effect = {
		every_owned_province = {
			limit = {
				trade_goods = slaves
			}
			change_trade_goods = unknown
			remove_building = tradecompany
		}
	}
}
add_vassalise_cb_effect = {
	add_casus_belli = {
		type = cb_vassalize_mission
		months = 300
		target = ROOT
	}
}

remove_vassalise_cb_effect = {
	if = {
		limit = {
			has_casus_belli = {
				type = cb_vassalize_mission
				target = event_target:agenda_country
			}
		}
		remove_casus_belli = {
			type = cb_vassalize_mission
			target = event_target:agenda_country
		}
	}
}

#Ends the normal Revolution disaster (if you have it) and clears all related modifiers and flags
clear_standard_revolution_elements_effect = {
	if = {
		limit = {
			has_disaster = revolution
		}
		end_disaster = revolution
	}

	clr_country_flag = religious_revolution
	clr_country_flag = serfdom
	clr_country_flag = social_reform
	clr_country_flag = royal_bureaucracy
	clr_country_flag = deplorable_reign								
	clr_country_flag = road_to_bankruptcy
	clr_country_flag = financial_crisis
	clr_country_flag = revolutionary_philosopher
	remove_country_modifier = religious_intolerance
	remove_country_modifier = religious_tolerance
	remove_country_modifier = restrict_serfdom
	remove_country_modifier = enforce_serfdom
	remove_country_modifier = suppress_free_thinkers
	remove_country_modifier = bureaucratic_reduction
	remove_country_modifier = bureaucratic_expansion
	remove_country_modifier = support_monarch
	remove_country_modifier = oppose_monarch
	remove_country_modifier = mint_money
	remove_country_modifier = fight_inflation
	remove_country_modifier = disarmament
	remove_country_modifier = financial_disaster
}

enact_revolution_effect = {
	disband_rebels = revolutionary_rebels
	disband_rebels = anti_tax_rebels
	hidden_effect = {
		if = {	
			limit = {
				any_subject_country = {
					has_country_modifier = colony_inspired_by_revolution
				}
			}
			every_subject_country = {
				remove_country_modifier = colony_inspired_by_revolution
			}
		}
	}
	if = {
		limit = { is_emperor_of_china = yes }
		dismantle_empire_of_china = yes
		set_global_flag = empire_of_china_dismantled
	}
	if = {
		limit = { NOT = { government = republic } }
		change_government_to_republic = yes
	}
	if = {
		limit = {
			revolution_target_exists = yes
		}
		add_government_reform = junior_revolutionary_republic_reform
	}
	else = {
		add_government_reform = revolutionary_republic_reform
		set_revolution_target = ROOT
	}
	kill_ruler = yes

	add_yearly_manpower = 5

	if = {
		limit = {
			has_country_flag = revolution_disaster_reactionary
		}
		add_country_modifier = {
			name = reactionaries_failed
			duration = 9125
		}
	}

	if = {
		limit = {
			has_country_flag = revolution_disaster_immediate_revolution
		}
		clr_country_flag = revolution_disaster_immediate_revolution
	}
	set_country_flag = revolutionary_republic_flag
}

#province scope
add_half_industrialization_effect = {
	if = {
		limit = {
			is_institution_enabled = industrialization
			NOT = { industrialization = 100 }
		}
		add_institution_embracement = {
			which = industrialization
			value = 50
		}
	}
}

#province scope
add_quarter_industrialization_effect = {
	if = {
		limit = {
			is_institution_enabled = industrialization
			NOT = { industrialization = 100 }
		}
		add_institution_embracement = {
			which = industrialization
			value = 25
		}
	}
}

#province scope, chooses which random monarch point bonus to give for agendas
choose_random_development_bonus_effect = {
	random_list = {
		1 = { set_province_flag = add_base_tax_flag }
		1 = { set_province_flag = add_base_production_flag }
		1 = { set_province_flag = add_base_manpower_flag }
	}
}

apply_random_development_bonus_bonus_effect = {
	trigger_switch = {
		on_trigger = has_province_flag
		add_base_tax_flag = { add_base_tax = 1 }
		add_base_production_flag = { add_base_production = 1 }
		add_base_manpower_flag = { add_base_manpower = 1 }
	}
	clear_random_development_bonus_flags_effect = yes
}

clear_random_development_bonus_flags_effect = {
	clr_province_flag = add_base_tax_flag
	clr_province_flag = add_base_production_flag
	clr_province_flag = add_base_manpower_flag
}
#province scope, should be used whenever the revolution is removed from a province
remove_revolution_from_province_effect = {
	hidden_effect = { set_revolution_in_province = no }
	custom_tooltip = no_spread_here_for_15_years_tt
	add_province_modifier = {
		name = no_revolution_here_dummy
		duration = 5475
		hidden = yes
	}
}


spawn_small_scaled_rebels = {
	#always specify type
	#specify saved_name = <saved_name> if you want to use one of those
	#specify leader and leader_dynasty if you want to do it that way
	#otherwise state "no_defined_leader = yes"
	if = {
		limit = {
			owner = {
				total_development = 1000
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 500
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 200
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 1.5
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 1.5
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 1.5
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else = {
		[[no_defined_leader]
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 1
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 1
				type = $type$
				leader = $saved_name$
			}
		]
	}
}

spawn_large_scaled_rebels = {
	#always specify type
	#specify saved_name = <saved_name> if you want to use one of those
	#specify leader and leader_dynasty if you want to do it that way
	#otherwise state "no_defined_leader = yes"
	if = {
		limit = {
			owner = {
				total_development = 2000
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 1000
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 500
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 200
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 2.5
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 2.5
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 2.5
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else = {
		[[no_defined_leader]
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $saved_name$
			}
		]
	}
}


#country scope. Currently just applies to the Hansa, if future ones are added, update the flags
#Used in nation formation decisions
restore_country_name_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_country_flag = is_hanseatic_league_flag
			}
			restore_country_name = yes
			clr_country_flag = is_hanseatic_league_flag
		}
	}
}

#Used to clone the nation when forming a colonial tag.
restore_old_nation_on_formation_effect = {
	custom_tooltip = loses_old_world_provs_tt
	hidden_effect = {
		if = {
			limit = {
				NOT = { is_former_colonial_nation = yes }
			}
			every_core_province = {
				add_core = event_target:old_tag_target
				remove_core = ROOT
			}
			release = event_target:old_tag_target
			ROOT = { set_country_flag = old_world_to_new_world_flag }
			ROOT = { set_country_flag = no_colonial_nations }
			every_subject_country = {
				limit = {
					always = yes
				}
				grant_independence = yes
			}
			every_subject_country = {
				limit = {
					is_subject_of_type = colony
				}
				ROOT = { inherit = PREV }
			}
			if = {
				limit = {
					NOT = { government_rank = 2 }
				}
				event_target:old_tag_target = { set_government_rank = 1 }
			}
			else_if = {
				limit = {
					government_rank = 3
				}
				event_target:old_tag_target = { set_government_rank = 3 }
			}
			if = {
				limit = {
					has_reform = english_monarchy
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = english_monarchy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = elective_monarchy
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = elective_monarchy
					#set_legacy_government = elective_monarchy_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = ottoman_government
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = ottoman_government
					#set_legacy_government = ottoman_government_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = mamluk_government
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = mamluk_government
					#set_legacy_government = mamluk_government_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					government = monarchy
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = feudalism_reform
					#set_legacy_government = monarchy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = veche_republic
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = veche_republic
					#set_legacy_government = veche_republic_legacy
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = merchants_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = merchants_reform
					#set_legacy_government = merchant_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = prussian_republic_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = prussian_republic_reform
					#set_legacy_government = prussian_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = dutch_republic
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = dutch_republic
					#set_legacy_government = dutch_republic_legacy
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = cossacks_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = cossacks_reform
					#set_legacy_government = cossacks_legacy_reform
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = noble_elite_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = noble_elite_reform
					#set_legacy_government = noble_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = peasants_republic
				}
				event_target:old_tag_target = {
					change_government = republic
					#set_legacy_government = peasants_republic_legacy
					add_government_reform = peasants_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = pirate_republic_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = pirate_republic_reform
					#set_legacy_government = pirate_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					government = republic
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = oligarchy_reform
					#set_legacy_government = noble_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					government = theocracy
					has_reform = monastic_order_reform
				}
				event_target:old_tag_target = {
					change_government = theocracy
					add_government_reform = monastic_order_reform
					#set_legacy_government = monastic_order_government
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					government = theocracy
				}
				event_target:old_tag_target = {
					change_government = theocracy
					add_government_reform = leading_clergy_reform
					#set_legacy_government = theocratic_government
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					government = tribal
					has_reform = steppe_horde
				}
				event_target:old_tag_target = {
					change_government = tribal
					add_government_reform = steppe_horde
					#set_legacy_government = steppe_horde_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else = {
				event_target:old_tag_target = {
					change_government = tribal
					add_government_reform = siberian_tribe
					#set_legacy_government = tribal_democracy_legacy
				}
			}
		}
	}
}

change_government_to_republic = {
	if = {
		limit = {
			NOT = { government = republic }
		}
		change_government = republic
		change_government_reform_progress = -250
	}
}

change_government_to_monarchy = {
	if = {
		limit = {
			NOT = { government = monarchy }
		}
		if = {
			limit = {
				government = republic
			}
			change_government = monarchy
			change_government_reform_progress = -500
		}
		else = {
			change_government = monarchy
			change_government_reform_progress = -250
		}
	}
}

change_government_to_theocracy = {
	if = {
		limit = {
			NOT = { government = theocracy }
		}
		if = {
			limit = {
				government = republic
			}
			change_government = theocracy
			change_government_reform_progress = -500
		}
		else = {
			change_government = theocracy
			change_government_reform_progress = -250
		}
	}
}

change_government_to_tribal = {
	if = {
		limit = {
			NOT = { government = tribal }
		}
		change_government = tribal
		change_government_reform_progress = -1000
	}
}
add_ruler_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = unknown_pantheon 
		}
		add_ruler_personality = ancestor_$key$_personality
	}
	else = {
		add_ruler_personality = $key$_personality
	}
}

add_heir_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = unknown_pantheon 
		}
		add_heir_personality = ancestor_$key$_personality
	}
	else = {
		add_heir_personality = $key$_personality
	}
}

add_queen_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = unknown_pantheon 
		}
		add_queen_personality = ancestor_$key$_personality
	}
	else = {
		add_queen_personality = $key$_personality
	}
}

remove_ruler_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = unknown_pantheon 
		}
		remove_ruler_personality = ancestor_$key$_personality
	}
	else = {
		remove_ruler_personality = $key$_personality
	}
}

remove_heir_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = unknown_pantheon 
		}
		remove_heir_personality = ancestor_$key$_personality
	}
	else = {
		remove_heir_personality = $key$_personality
	}
}

remove_queen_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = unknown_pantheon 
		}
		remove_queen_personality = ancestor_$key$_personality
	}
	else = {
		remove_queen_personality = $key$_personality
	}
}


#The three effects below are used for setting a great project to exact the tier
#I tried to combine the three effects into one single scripted effect, but I couldn't figure a way out to do the effect without having to do a lot of custom tooltip
#Sets monument tier 1 (has no effect if the monument is tier 1 or higher)
#Province scope
set_great_project_tier_1 = {
	if = {
		limit = {
			has_great_project = {	#Asks the EXACT tier unlike other triggers
				type = $type$
				tier = 0
			}
		}
		add_great_project_tier = {
			type = $type$
			tier = 1
		}
		add_base_tax = 1
		add_base_production = 1
		add_base_manpower = 1
	}
}

#Sets monument tier 2 (has no effect if the monument is tier 2 or higher)
#Province scope
set_great_project_tier_2 = {
	if = {
		limit = {
			has_great_project = {
				type = $type$
				tier = 2
			}
		}
		add_base_tax = 3
		add_base_production = 3
		add_base_manpower = 3
	}
	if = {
		limit = {
			has_great_project = {
				type = $type$
				tier = 1
			}
			NOT = {
				has_great_project = {
					type = $type$
					tier = 2
				}
			}
		}
		add_great_project_tier = {
			type = $type$
			tier = 1
		}
		add_base_tax = 1
		add_base_production = 1
		add_base_manpower = 1
	}
	if = {
		limit = {
			has_great_project = {	#Asks the EXACT tier unlike other triggers
				type = $type$
				tier = 0
			}
			NOT = {
				has_great_project = {
					type = $type$
					tier = 1
				}
			}
		}
		add_great_project_tier = {
			type = $type$
			tier = 2
		}
		add_base_tax = 3
		add_base_production = 3
		add_base_manpower = 3
	}
}

#Sets monument tier 3 (has no effect if the monument is tier 3 or higher)
#Province scope
set_great_project_tier_3 = {
	if = {
		limit = {
			has_great_project = {
				type = $type$
				tier = 3
			}
		}
		add_base_tax = 5
		add_base_production = 5
		add_base_manpower = 5
	}
	if = {
		limit = {
			has_great_project = {
				type = $type$
				tier = 2
			}
			NOT = {
				has_great_project = {
					type = $type$
					tier = 3
				}
			}
		}
		add_great_project_tier = {
			type = $type$
			tier = 1
		}
		add_base_tax = 3
		add_base_production = 3
		add_base_manpower = 3
	}
	if = {
		limit = {
			has_great_project = {
				type = $type$
				tier = 1
			}
			NOT = {
				has_great_project = {
					type = $type$
					tier = 2
				}
			}
		}
		add_great_project_tier = {
			type = $type$
			tier = 2
		}
		add_base_tax = 3
		add_base_production = 3
		add_base_manpower = 3
	}
	if = {
		limit = {
			has_great_project = {	#Asks the EXACT tier unlike other triggers
				type = $type$
				tier = 0
			}
			NOT = {
				has_great_project = {
					type = $type$
					tier = 1
				}
			}
		}
		add_great_project_tier = {
			type = $type$
			tier = 3
		}
	}
	add_base_tax = 1
	add_base_production = 1
	add_base_manpower = 1
}

#Country effect
create_colony_mission_reward = {
	if = {
		limit = {
			$province$ = {
				is_empty = yes
			}
		}
		$province$ = {
			add_siberian_construction = 400
		}
		if = {
			limit = {
				in_golden_age = yes
			}
			$province$ = {
				add_base_tax = 1
				add_base_production = 1
				add_base_manpower = 1
			}
		}
	}
	else_if = {
		limit = {
			owns = $province$
		}
		$province$ = {
			add_base_tax = 1
			add_base_production = 1
			add_base_manpower = 1
		}
	}
	else_if = {
		limit = {
			NOT = { is_permanent_claim = $province$ }
		}
		add_permanent_claim = $province$
	}
}

#Provine effect
create_colony_mission_reward_province = {
	if = {
		limit = {
			is_empty = yes
		}
		add_siberian_construction = 400
		if = {
			limit = {
				in_golden_age = yes
			}
			$province$ = {
				add_base_tax = 1
				add_base_production = 1
				add_base_manpower = 1
			}
		}
	}
	else_if = {
		limit = {
			owned_by = $country$
		}
		add_base_tax = 1
		add_base_production = 1
		add_base_manpower = 1
	}
	else_if = {
		limit = {
			NOT = { is_permanent_claim = $country$ }
		}
		add_permanent_claim = $country$
	}
}

#Province effect
remove_random_development = {
	if = {
		limit = {
			base_tax = 2
			base_production = 2
			base_manpower = 2
		}
		random_list = {
			33 = {
				add_base_tax = -1
			}
			33 = {
				add_base_production = -1
			}
			33 = {
				add_base_manpower = -1
			}
		}
	}
	else_if = {
		limit = {
			base_tax = 2
			base_production = 2
		}
		random_list = {
			50 = {
				add_base_tax = -1
			}
			50 = {
				add_base_production = -1
			}
		}
	}
	else_if = {
		limit = {
			base_tax = 2
			base_manpower = 2
		}
		random_list = {
			50 = {
				add_base_tax = -1
			}
			50 = {
				add_base_manpower = -1
			}
		}
	}
	else_if = {
		limit = {
			base_manpower = 2
			base_production = 2
		}
		random_list = {
			50 = {
				add_base_manpower = -1
			}
			50 = {
				add_base_production = -1
			}
		}
	}
	else_if = {
		limit = {
			base_tax = 2
		}
		add_base_tax = -1
	}
	else_if = {
		limit = {
			base_production = 2
		}
		add_base_production = -1
	}
	else_if = {
		limit = {
			base_manpower = 2
		}
		add_base_manpower = -1
	}
}

#Country effect
add_inflation_scaled_to_trade = {
	[[custom_tooltip] 
		custom_tooltip = $custom_tooltip$
	]
	#custom_tooltip = add_inflation_scaled_to_trade_tt	#Make sure to define an own custom tooltip for telling how much inflation per trade percantage should be given
	hidden_effect = {
		export_to_variable = {
			which = trade_income_variable
			value = trade_income_percentage
		}
		multiply_variable = {
			which = trade_income_variable
			value = 100
		}
		while = {
			limit = {
				check_variable = {
					which = trade_income_variable
					value = 1
				}
			}
			add_inflation = $inflation$
			subtract_variable = {
				which = trade_income_variable
				value = 1
			}
		}
	}
}

#Country effect
add_legitimacy_equivalent = {
	add_legitimacy = $amount$
	add_horde_unity = $amount$
	add_devotion = $amount$
	add_meritocracy = $amount$
	[[republican_tradition]
		add_republican_tradition = $republican_tradition$	#This one is special because of how much republics scale with it
	]
}

#Country effect
##########################################################
# Supports following privileges
# estate_burghers_hydraulic_rights
# estate_nobility_cawa_peace_keepers
# estate_nobility_cawa_offensive_fighters
# estate_burghers_control_over_the_mint
# estate_dhimmi_guarantee_of_traditions
# estate_priests_yakobs_churches
# estate_nobility_grant_power_to_the_bashorun
##########################################################
# When adding new privileges then make sure that a unlock_privilege_$estate_privilege$_tt is defined in the localization
# For checking if an estate privilege is unlocked already, use has_unlocked_estate_privilege = { estate_privilege = $estate_privilege$ }
unlock_estate_privilege = {
	custom_tooltip = unlock_privilege_$estate_privilege$_tt
	hidden_effect = {
		set_country_flag = unlocked_privilege_$estate_privilege$
	}
}

#Country effect
##########################################################
# Supports following merc companies
# merc_oyo_cavalry
##########################################################
# When adding a new merc company then make sure that a unlock_$merc_company$_tt is defined in the localization
# For checking if a merc company is unlocked already, use has_unlocked_merc_company = { merc_company = $merc_company$ }
unlock_merc_company = {
	custom_tooltip = unlock_$merc_company$_tt
	hidden_effect = {
		set_country_flag = unlocked_$merc_company$
	}
}

#Same as above, but this time it makes a company unavailable
#Does not support any merc company yet
#lock_merc_company = {
#	custom_tooltip = lock_$merc_company$_tt
#	hidden_effect = {
#		clr_country_flag = unlocked_$merc_company$
#	}
#}

#Country effect
##########################################################
# When adding a new government reform then make sure that a unlock_$government_reform$_tt is defined in the localization
# For checking if a government reform is unlocked already, use has_unlocked_government_reform = { government_reform = $government_reform$ }
# For localization write the following: "Unlock the government reform §Y<Government Reform>§!."
unlock_government_reform = {
	custom_tooltip = unlock_$government_reform$_tt
	hidden_effect = {
		set_country_flag = unlocked_$government_reform$
	}
}

# When adding a new estate then make sure that a unlock_$estate$_tt is defined in the localization
# For checking if an Estate is unlocked already, use has_unlocked_estate = { estate = $estate$ }
# For localization write the following: "Unlock the §Y<Estate>§! Estate."
# Important: this way of unlocking an estate does not give you permanent access to the estate - hence the show_conditions.
# For granting permanent access, use "enable_estate_effect"
unlock_estate = {
	custom_tooltip = unlock_$estate$_tt
	hidden_effect = {
		set_country_flag = unlocked_$estate$
	}
	[[show_conditions]
		custom_tooltip = is_unavailable_$estate$
	]
}

# Unlocks the estate without any kind of condition
enable_estate_effect = {
	custom_tooltip = mechanic_enables_$estate$_yes
	hidden_effect = {
		clr_country_flag = disables_$estate$_flag
		set_country_flag = enables_$estate$_flag
	}
}

# Locks the estate even if they would 
disable_estate_effect = {
	custom_tooltip = mechanic_disables_$estate$_yes
	hidden_effect = {
		set_country_flag = disables_$estate$_flag
		clr_country_flag = enables_$estate$_flag
	}
}

halves_parliament_bribe_costs = {
    if = {
        custom_tooltip = halves_parliament_bribe_costs_tt
    }
    set_country_flag = halved_parliament_bribe_costs
}
add_increase_same_religion_opinion = {
	custom_tooltip = increase_same_religion_opinion_tt
	hidden_effect = {
		set_country_flag = has_increased_religios_opinion
		every_known_country = {
			limit = {
				OR = {					  
					ROOT = { has_harmonized_with = PREV }
					religion = ROOT
				}											  
				NOT = {
					has_opinion_modifier = {
						who = ROOT
						modifier = increased_same_religion
					}
				}
			}
			add_opinion = {
				who = ROOT
				modifier = increased_same_religion
			}
			reverse_add_opinion = {
				who = ROOT
				modifier = increased_same_religion
			}
		}
	}
}

#Country effect
remove_increase_same_religion_opinion = {
	custom_tooltip = remove_increase_same_religion_opinion_tt
	hidden_effect = {
		clr_country_flag = has_increased_religios_opinion
		every_country = {
			limit = {
				has_opinion_modifier = {
					who = ROOT
					modifier = increased_same_religion
				}
			}
			remove_opinion = {
				who = ROOT
				modifier = increased_same_religion
			}
			reverse_remove_opinion = {
				who = ROOT
				modifier = increased_same_religion
			}
		}
	}
}

#Country effect - make sure to add an own custom tooltip in form of: "Every §Y$religion$§! country will have their opinion of [Root.GetName] increased by §G+50§!."
add_opinion_of_religion = {
	hidden_effect = {
		set_country_flag = has_improve_opinion_flag
		set_country_flag = has_increased_$religion$_opinion
		every_known_country = {
			limit = {
				religion = $religion$
				NOT = {
					has_opinion_modifier = {
						who = ROOT
						modifier = increased_religion_opinion
					}
				}
			}
			add_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
			reverse_add_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
		}
	}
}

#Country effect - make sure to add a custom localization like: "Remove the opinion bonus of $religion$ countries for §Y[Root.GetName]§!."
remove_religious_opinion_for_scope = {
	hidden_effect = {
		clr_country_flag = has_improve_opinion_flag
		clr_country_flag = has_increased_$religion$_opinion
		every_country = {
			limit = {
				religion = $religion$
				has_opinion_modifier = {
					who = ROOT
					modifier = increased_religion_opinion
				}
			}
			remove_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
			reverse_remove_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
		}
	}
}

#Country effect
add_temporary_colonist = {
	add_country_modifier = {
		name = temporary_colonist
		duration = $duration$
	}
	custom_tooltip = add_temporary_colonist_tt
}

#Country effect - Mission reward
allow_baseline_invite_scholar = {
	custom_tooltip = allows_every_time_invite_of_$religious_school$
	hidden_effect = {
		set_country_flag = can_always_invite_$religious_school$
	}
	[[religious_school_modifier]
		tooltip = {
			add_country_modifier = {
				name = $religious_school_modifier$
				duration = -1
			}
		}
	]
}
#Country effect
#Make sure to make your own custom tooltip for it because parameters can't be given as input. Sadly.
transfer_treasury = {
	#custom_tooltip = transfer_treasury_tt	#Transfer §Y[$giver$.$variable$.GetValue]§! Ducats to $Y[$taker$.GetName]§!.
	hidden_effect = {
		$giver$ = {
			while = {
				limit = {
					check_variable = {
						which = $variable$
						value = 1
					}
				}
				$taker$ = {
					add_treasury = 1
				}
				add_treasury = -1
				subtract_variable = {
					which = $variable$
					value = 1
				}
			}
			multiply_variable = {
				which = $variable$
				value = 100
			}
			while = {
				limit = {
					check_variable = {
						which = $variable$
						value = 1
					}
				}
				$taker$ = {
					add_treasury = 0.01
				}
				add_treasury = -0.01
				subtract_variable = {
					which = $variable$
					value = 1
				}
			}
		}
	}
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
}

#Country effect
enable_propogate_religion_effect = {
	custom_tooltip = enable_propogate_religion_effect_tt
	hidden_effect = {
		set_country_flag = can_use_propagate_religion
	}
}

#Country effect
disable_propogate_religion_effect = {
	custom_tooltip = disable_propogate_religion_effect_tt
	hidden_effect = {
		clr_country_flag = can_use_propagate_religion
	}
}

#Country effect
enable_propogate_religion_immunity = {
	custom_tooltip = enable_propogate_religion_immunity_tt
	hidden_effect = {
		set_country_flag = immunity_against_propogate_religion
	}
}

#Country effect
disable_propogate_religion_immunity = {
	custom_tooltip = disable_propogate_religion_immunity_tt
	hidden_effect = {
		clr_country_flag = immunity_against_propogate_religion
	}
}

#Country effect
enable_propagate_religion_in_abrahamic_provinces = {
	custom_tooltip = enable_propogate_religion_in_abrahamic_provinces_tt
	hidden_effect = {
		set_country_flag = can_propagate_religion_in_abrahamic_provinces
	}
}

#Country effect
disable_propogate_religion_in_abrahamic_provinces = {
	custom_tooltip = disable_propogate_religion_in_abrahamic_provinces_tt
	hidden_effect = {
		clr_country_flag = can_propagate_religion_in_abrahamic_provinces
	}
}

#Country effect
set_prestige_to_zero = {
	custom_tooltip = set_prestige_to_zero_tt
	hidden_effect = {
		add_prestige = -200
		add_prestige = 100
	}
}

#Country effect
disable_annexation_penalty = {
	custom_tooltip = disable_annexation_penalty_tt
	hidden_effect = {
		set_country_flag = no_integrate_penalty
		remove_country_modifier = annexers_legacy
	}
}

#Country effect
enable_annexation_penalty = {
	custom_tooltip = enable_annexation_penalty_tt
	hidden_effect = {
		clr_country_flag = no_integrate_penalty
	}
}

#Country effect
enable_development_on_buildings_built = {
	custom_tooltip = enable_development_on_buildings_built_tt
	hidden_effect = {
		set_country_flag = improve_development_on_buildings_built
	}
}

#Province effect - used for buildings
add_development_from_building = {
	if = {
		limit = {
			NOT = { gained_development_from_building = { building = $building$ } }
		}
		add_base_$type$ = $value$
		hidden_effect = {
			set_province_flag = built_dev_$building$
		}
	}
}

#Province effect - used for buildings
add_development_from_upgrading_or_building = {
	if = {
		limit = {
			NOT = { gained_development_from_building = { building = $building$ } }
		}
		if = {
			limit = { has_province_flag = built_dev_$obsolete_building$ }
			add_base_$type$ = $upgrade_value$
		}
		else = {
			add_base_$type$ = $value$
		}
		hidden_effect = {
			set_province_flag = built_dev_$building$
		}
	}
}

#Province effect - used for buildings
remove_development_from_building = {
	if = {
		limit = {
			gained_development_from_building = { building = $building$ }
		}
		add_base_$type$ = -$value$
		if = {
			limit = {
				NOT = { base_$type$ = 1 }
			}
			set_base_$type$ = 1
		}
		hidden_effect = {
			clr_province_flag = built_dev_$building$
		}
	}
}

#Province effect
add_latest_building = {
	[[trade]
		if = {
			limit = { $builder$ = { dip_tech = 170 } }
			add_building = stock_exchange
		}
		else_if = {
			limit = { $builder$ = { dip_tech = 110 } }
			add_building = trade_depot
		}
		else = {
			add_building = marketplace
		}
	]
	[[government]
		if = {
			limit = { $builder$ = { adm_tech = 130 } }
			add_building = town_hall
		}
		else = {
			add_building = courthouse
		}
	]
	[[production]
		if = {
			limit = { $builder$ = { adm_tech = 95 } }
			add_building = counting_house
		}
		else = {
			add_building = workshop
		}
	]
	[[tax]
		if = {
			limit = { $builder$ = { adm_tech = 90 } }
			add_building = cathedral
		}
		else = {
			add_building = temple
		}
	]
	[[manpower]
		if = {
			limit = { $builder$ = { mil_tech = 150 } }
			add_building = training_fields
		}
		else = {
			add_building = barracks
		}
	]
	[[sailors]
		if = {
			limit = { $builder$ = { dip_tech = 130 } }
			add_building = drydock
		}
		else = {
			add_building = dock
		}
	]
	[[army_forcelimit]
		if = {
			limit = { $builder$ = { mil_tech = 110 } }
			add_building = conscription_center
		}
		else = {
			add_building = regimental_camp
		}
	]
	[[navy_forcelimit]
		if = {
			limit = { $builder$ = { dip_tech = 140 } }
			add_building = grand_shipyard
		}
		else = {
			add_building = shipyard
		}
	]
	[[coastal]
		if = {
			limit = { $builder$ = { dip_tech = 160 } }
			add_building = naval_battery
		}
		else = {
			add_building = coastal_defence
		}
	]
	[[fort]
		if = {
			limit = { $builder$ = { mil_tech = 180 } }
			add_building = fort_18th
		}
		else_if = {
			limit = { $builder$ = { mil_tech = 140 } }
			add_building = fort_17th
		}
		else_if = {
			limit = { $builder$ = { mil_tech = 100 } }
			add_building = fort_16th
		}
		else = {
			add_building = fort_15th
		}
	]
}

#Country effect - Make sure to make an own custom tooltip for it when using it "Gain §G$years$ years§! worth of Trade Income."
add_years_of_trade_income = {
	hidden_effect = {
		set_variable = {
			which = trade_years
			value = $years$
		}
		export_to_variable = {
			which = percentage_of_yearly_trade_income
			value = trade_income_percentage
		}
		export_to_variable = {
			which = yearly_trade_income
			value = monthly_income
		}
		multiply_variable = {
			which = yearly_trade_income
			which = percentage_of_yearly_trade_income
		}
		multiply_variable = {
			which = yearly_trade_income
			value = 12
		}
		while = {
			limit = {
				check_variable = {
					which = trade_years
					value = 1
				}
			}
			set_variable = {
				which = trade_income_added
				which = yearly_trade_income
			}
			while = {
				limit = {
					check_variable = {
						which = trade_income_added
						value = 1
					}
				}
				add_treasury = 1
				subtract_variable = {
					which = trade_income_added
					value = 1
				}
			}
			multiply_variable = {
				which = trade_income_added
				value = 100
			}
			while = {
				limit = {
					check_variable = {
						which = trade_income_added
						value = 1
					}
				}
				add_treasury = 0.01
				subtract_variable = {
					which = trade_income_added
					value = 1
				}
			}
			subtract_variable = {
				which = trade_years
				value = 1
			}
		}
	}
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
}

#Country effect
enable_capital_slave_raid = {
	custom_tooltip = enable_capital_slave_raid_tt
	hidden_effect = {
		set_country_flag = enabled_capital_slave_raid
	}
	if = {
		limit = { has_dlc = "Leviathan" }
		custom_tooltip = enable_slave_raid_pillage_tt
	}
}

disable_capital_slave_raid = {
	custom_tooltip = disable_capital_slave_raid_tt
	hidden_effect = {
		clr_country_flag = enabled_capital_slave_raid
	}
	if = {
		limit = { has_dlc = "Leviathan" }
		custom_tooltip = disable_slave_raid_pillage_tt
	}
}

#On action effect
grant_manpower_from_capital_slave_raid = {
	if = {
		limit = { FROM = { fort_level = 1 } }
		ROOT = { add_yearly_manpower = 0.1 }
	}
	if = {
		limit = { FROM = { fort_level = 2 } }
		ROOT = { add_yearly_manpower = 0.1 }
	}
	if = {
		limit = { FROM = { fort_level = 3 } }
		ROOT = { add_yearly_manpower = 0.1 }
	}
	if = {
		limit = { FROM = { fort_level = 4 } }
		ROOT = { add_yearly_manpower = 0.1 }
	}
	if = {
		limit = { FROM = { fort_level = 5 } }
		ROOT = { add_yearly_manpower = 0.1 }
	}
	if = {
		limit = { FROM = { fort_level = 6 } }
		ROOT = { add_yearly_manpower = 0.1 }
	}
	if = {
		limit = { FROM = { fort_level = 7 } }
		ROOT = { add_yearly_manpower = 0.1 }
	}
	if = {
		limit = { FROM = { fort_level = 8 } }
		ROOT = { add_yearly_manpower = 0.1 }
	}
	if = {
		limit = { FROM = { fort_level = 9 } }
		ROOT = { add_yearly_manpower = 0.1 }
	}
	if = {
		limit = { FROM = { fort_level = 10 } }
		ROOT = { add_yearly_manpower = 0.1 }
	}
}

slave_raid_pillage_capital_effect = {
	add_yearly_manpower = 1
	random_owned_province = {
		limit = { trade_goods = slaves }
		add_base_production = 1
	}
}

#Country effect
disable_stab_hit_on_ruler_death = {
	custom_tooltip = disable_stab_hit_on_ruler_death_tt
	hidden_effect = {
		set_country_flag = no_stab_hit_on_ruler_death
	}
}

enable_stab_hit_on_ruler_death = {
	custom_tooltip = enable_stab_hit_on_ruler_death_tt
	hidden_effect = {
		clr_country_flag = no_stab_hit_on_ruler_death
	}
}

#Country effect
enable_tributary_state_use = {
	if = {
		limit = {
			OR = {
				has_dlc = "Mandate of Heaven"
				has_dlc = "Origins"
			}
		}
		custom_tooltip = enable_tributary_state_use_tt
	}
	hidden_effect = {
		set_country_flag = can_create_tributaries_flag
	}
}

disable_tributary_state_use = {
	if = {
		limit = {
			OR = {
				has_dlc = "Mandate of Heaven"
				has_dlc = "Origins"
			}
		}
		custom_tooltip = disable_tributary_state_use_tt
	}
	hidden_effect = {
		clr_country_flag = can_create_tributaries_flag
	}
}

#Use for estate effects
enable_tributary_state_use_estate = {
	if = {
		limit = {
			OR = {
				has_dlc = "Mandate of Heaven"
				has_dlc = "Origins"
			}
		}
		custom_tooltip = enable_tributary_state_use_tt
	}
	hidden_effect = {
		set_country_flag = can_create_tributaries_flag_estate
	}
}

disable_tributary_state_use_estate = {
	if = {
		limit = {
			OR = {
				has_dlc = "Mandate of Heaven"
				has_dlc = "Origins"
			}
		}
		custom_tooltip = disable_tributary_state_use_tt
	}
	hidden_effect = {
		clr_country_flag = can_create_tributaries_flag_estate
	}
	every_subject_country = {
		limit = {
			is_subject_of_type = tributary_state
		}
		grant_independence = yes
	}
}

#Country effect, event target
select_biggest_country_of_region = {
	if = {
		limit = { any_country = { capital_scope = { region = $region$ } } }
		if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 1000 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 1000 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 900 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 900 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 800 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 800 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 700 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 700 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 600 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 600 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 500 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 500 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 400 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 400 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 300 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 300 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 200 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 200 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 100 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 100 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else = {
			limit = { any_country = { capital_scope = { region = $region$ } } }
			random_country = { 
				limit = { capital_scope = { region = $region$ } }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		set_country_flag = mal_visit_foreign_capital
	}
}

#Credits for that script goes to Stiopa
for = {
    set_variable = {
        which = ForLoopCounter
        value = $amount$
    }

    while = {
        limit = {
            check_variable = {
                which = ForLoopCounter
                value = 1
            }
        }
        #$effect$
        subtract_variable = {
            which = ForLoopCounter
            value = 1
        }
    }
}

add_prestige_or_monarch_power = {
    tooltip = {
        add_prestige = $amount$
    }
    custom_tooltip = ME_ADD_PRESTIGE_OR_MONARCHPOWER
    hidden_effect = {
        for = {
            amount = $amount$
            effect = "
                if = {
                    limit = {
                        NOT = { prestige = 100 }
                    }
                    add_prestige = 1
                }
                else = {
                    add_adm_power = 1
                    add_dip_power = 1
                    add_mil_power = 1
                }
            "
        }
    }
}

add_stat_or_monarch_power = {
    tooltip = {
        change_$stat$ = $amount$
    }
    custom_tooltip = ADD_STAT_OR_POWER_$stat$
    hidden_effect = {
		set_variable = {
			which = ForLoopCounter
			value = $amount$
		}
		while = {
			limit = {
				check_variable = {
					which = ForLoopCounter
					value = 1
				}
			}
			if = {
				limit = {
					NOT = { $stat$ = 6 }
				}
				change_$stat$ = 1
			}
			else = {
				add_$stat$_power = 100
			}
			subtract_variable = {
				which = ForLoopCounter
				value = 1
			}
		}
    }
}

for_variable_amount = {
    set_variable = {
        which = ForLoopCounter
        which = $variable$
    }

    while = {
        limit = {
            check_variable = {
                which = ForLoopCounter
                value = 1
            }
        }
        #$effect$
        subtract_variable = {
            which = ForLoopCounter
            value = 1
        }
    }
}


##########################################################
# Supports following types of units
# artillery
# cavalry
# infantry
# mercenary_infantry
# mercenary_cavalry
# heavy_ship
# light_ship
# galley
# transport
# <unit name> 
##########################################################
#Country effect
# For tooltip use the following scheme: "§Y<amount>§! of §Y<unit_type>§! will be created in §Y[<province>.GetName]§! for §Y[This.GetName]§!."
create_units_of_type = {
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
	hidden_effect = {
		for = {
			amount = $amount$
			effect = "
				$province$ = { $unit_type$ = PREV }
			"
		}
	}
}

#Province effect
# For tooltip use the following scheme: "§Y<amount>§! of §Y<unit_type>§! will be created in §Y[This.GetName]§! for §Y[<who>.GetName]§!."
create_units_of_type_in_province = {
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
	hidden_effect = {
		$who$ = {
			for = {
				amount = $amount$
				effect = "
					PREV = { $unit_type$ = $who$ }
				"
			}
		}
	}
}

#Country effect
##########################################################
# Supports following factions (aka. has tooltips for them)
# temples
# enuchs
# bureaucrats
# mr_aristocrats
# mr_traders
# mr_guilds
# rr_jacobins
# rr_royalists
# rr_girondists
# pr_buccaneers
# pr_smugglers
# pr_captains
##########################################################
faction_in_power_effect = {
	if = {
		limit = { has_faction = $faction$ }
		if = {
			limit = { faction_in_power = $faction$ }
			custom_tooltip = $faction$_are_currently_in_power_tt
			#$effect$
		}
		else = {
			custom_tooltip = $faction$_in_power_tt
			tooltip = {
				$effect$
			}
		}
	}
}

## adds the culture as an accepted culture or 100 dip power
### add_accepted_culture_or_dip_power = { culture = <culture> }
### the custom effect is only able to check for up to 10 culture slots
#Credits for that script goes to Stiopa
add_accepted_culture_or_dip_power = {
	tooltip = {
		add_accepted_culture = $culture$
	}
	custom_tooltip = ADD_ACCEPTED_CULTURE_TT # "If the §YCulture§! is already an §YAccepted Culture§!, or if there are not enough §YSlots§!, gain §G100§! Diplomatic Power instead."
	hidden_effect = {
		if = {
			limit = {
				accepted_culture = $culture$
			}
			add_dip_power = 100
		}
		else_if = {
			limit = {
				primary_culture = $culture$
			}
			add_dip_power = 100
		}
		else_if = {
			limit = {
				num_accepted_cultures = 10
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 11
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 9
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 10
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 8
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 9
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 7
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 8
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 6
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 7
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 5
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 6
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 4
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 5
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 3
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 4
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 2
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 3
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 1
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 2
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				NOT = { num_accepted_cultures = 1 }
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 1
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else = {
			add_dip_power = 100
		}
	}
}

#Use this scripted in the on_actions file, on_battle_won_country
count_won_battles_and_reward_at_end = {
	if = {
		limit = {
			ROOT = {
				has_country_flag = $counting_flag$	#Using country flags because we don't want a country to stack a variable out of control and cause performance issue because of large variables.
			}
		}
		ROOT = {
			change_variable = {
				which = num_won_battles
				value = 1
			}
		}
	}
	if = {
		limit = {
			ROOT = {
				has_country_flag = $counting_flag$
				check_variable = {
					which = num_won_battles
					value = $max_value$
				}
			}
		}
		ROOT = {
			clr_country_flag = $counting_flag$
            #$effect$
		}
	}
}

fifty_percent_merc_army_professionalism_cost = {
	custom_tooltip = fifty_percent_merc_army_professionalism_cost_tt
	hidden_effect = {
		set_country_flag = fifty_percent_merc_army_professionalism_cost
	}
}

increase_issue_passed_counter = {
	hidden_effect = {
		change_variable = {
			which = issues_passed
			value = 1
		}
	}
}

#Province effect
set_center_level_3_center_of_trade = {
	if = {
		limit = { NOT = { province_has_center_of_trade_of_level = 1 } }
		center_of_trade = 3
	}
	else = {
		if = {
			limit = { province_has_center_of_trade_of_level = 3 }
			add_base_production = 4
		}
		else_if = {
			limit = { province_has_center_of_trade_of_level = 2 }
			add_base_production = 2
			add_center_of_trade_level = 1
		}
		else = {
			add_center_of_trade_level = 2
		}
	}
}


set_center_level_2_center_of_trade = {
	if = {
		limit = { NOT = { province_has_center_of_trade_of_level = 1 } }
		center_of_trade = 2
	}
	else = {
		if = {
			limit = { province_has_center_of_trade_of_level = 2 }
			add_base_production = 2
		}
		else = {
			add_center_of_trade_level = 1
		}
	}
}

enable_admirals_army_professionalism = {
	if = {
		custom_tooltip = admirals_give_army_professionalism_tt
	}
	hidden_effect = {
		set_country_flag = admirals_give_army_professionalism
	}
}

make_ruler_to_legendary_pirate = {
	if = {
		limit = {
			NOT = { num_of_ruler_traits = { amount = 3 } }
		}
		add_ruler_personality = legendary_pirate_personality
		custom_tooltip = legendary_pirate_personality_at
	}
	else = {
		custom_tooltip = legendary_pirate_personality_bt
	}
	set_ruler_flag = historical_pirate
	random_list = {
		1 = { trigger = { NOT = { ADM = 6 } } change_adm = 1 }
		1 = { trigger = { NOT = { DIP = 6 } } change_dip = 1 }
		1 = { trigger = { NOT = { MIL = 6 } } change_mil = 1 }
	}
}

on_completed_agenda_effect_church = {
	if = {
		limit = { has_government_attribute = clergy_estate_agendas_gives_karma }
		add_karma = 10
	}
}