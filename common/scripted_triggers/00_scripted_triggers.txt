# SOME META SCRIPT EXAMPLES
# This also works for Scripted effects the same. Provided arguments will be pasted in
# wherever the key occurs. If it fails to compile you should get a proper error message
# and the source generated in the error log. There is no added overhead during runtime but
# if used extensivley it might make loading time longer.
#
# my_test_trigger = {
#	OR = {
#		has_country_modifier = $ARG1$_modifier
#		AND = {
#			has_country_modifier = $ARG2$_modifier
#			$CONTEXT$ = {
#				NOT = { has_country_modifier = $ARG1$_modifier }
#			}
#		}
#	}
# }
# Usage:
# my_test_trigger = { ARG1=foo ARG2=bar CONTEXT=FROM }

#GENERAL TRIGGERS
has_mil_advisor = {
	custom_trigger_tooltip = {
		tooltip = has_mil_advisor_tooltip
		OR = {
			advisor = esu_blacksmith
			advisor = esu_trainer
			advisor = esu_hunter
			advisor = esu_thane
			advisor = esu_officer
			advisor = esu_scout
			advisor = esu_grand_champion
			advisor = esu_recruiter
		}
	}
}

has_mil_advisor_2 = {
	custom_trigger_tooltip = {
		tooltip = has_mil_advisor_2_tooltip
		OR = {
			esu_blacksmith = 2
			esu_trainer = 2
			esu_hunter = 2
			esu_thane = 2
			esu_officer = 2
			esu_scout = 2
			esu_grand_champion = 2
			esu_recruiter = 2
		}
	}
}

has_mil_advisor_3 = {
	custom_trigger_tooltip = {
		tooltip = has_mil_advisor_3_tooltip
		OR = {
			esu_blacksmith = 3
			esu_trainer = 3
			esu_hunter = 3
			esu_thane = 3
			esu_officer = 3
			esu_scout = 3
			esu_grand_champion = 3
			esu_recruiter = 3
		}
	}
}

has_adm_advisor = {
	custom_trigger_tooltip = {
		tooltip = has_adm_advisor_tooltip
		OR = {
			advisor = esu_steward
			advisor = esu_bard
			advisor = esu_mage
			advisor = esu_monk
			advisor = esu_priest
			advisor = esu_researcher
			advisor = esu_inspector
			advisor = esu_curator
		}
	}
}

has_adm_advisor_2 = {
	custom_trigger_tooltip = {
		tooltip = has_adm_advisor_2_tooltip
		OR = {
			esu_steward = 2
			esu_bard = 2
			esu_mage = 2
			esu_monk = 2
			esu_priest = 2
			esu_researcher = 2
			esu_inspector = 2
			esu_curator = 2
		}
	}
}

has_adm_advisor_3 = {
	custom_trigger_tooltip = {
		tooltip = has_adm_advisor_3_tooltip
		OR = {
			esu_steward = 3
			esu_bard = 3
			esu_mage = 3
			esu_monk = 3
			esu_priest = 3
			esu_researcher = 3
			esu_inspector = 3
			esu_curator = 3
		}
	}
}


has_dip_advisor = {
	custom_trigger_tooltip = {
		tooltip = has_dip_advisor_tooltip
		OR = {
			advisor = esu_merchant
			advisor = esu_alchemist
			advisor = esu_governor
			advisor = esu_negotiator
			advisor = esu_spy
			advisor = esu_colonial_overseer
			advisor = esu_adventurer
			advisor = esu_navarch
		}
	}
}

has_dip_advisor_2 = {
	custom_trigger_tooltip = {
		tooltip = has_dip_advisor_2_tooltip
		OR = {
			esu_merchant = 2
			esu_alchemist = 2
			esu_governor = 2
			esu_negotiator = 2
			esu_spy = 2
			esu_colonial_overseer = 2
			esu_adventurer = 2
			esu_navarch = 2
		}
	}
}

has_dip_advisor_3 = {
	custom_trigger_tooltip = {
		tooltip = has_dip_advisor_3_tooltip
		OR = {
			esu_merchant = 3
			esu_alchemist = 3
			esu_governor = 3
			esu_negotiator = 3
			esu_spy = 3
			esu_colonial_overseer = 3
			esu_adventurer = 3
			esu_navarch = 3
		}
	}
}


is_subject_other_than_tributary_trigger = { #Ie Tags that cannot conduct independent diplomacy
	custom_trigger_tooltip = {
		tooltip = is_subject_other_than_tributary_trigger_tooltip
		is_subject = yes
		NOT = { is_subject_of_type = tributary_state }
	}
}

is_free_or_tributary_trigger = { #I.e. Tags that can conduct independent diplomacy
	custom_trigger_tooltip = {
		# Audax Validator "." Ignore_NEXT
		tooltip = is_free_or_tributary_trigger_tooltip
		OR = {
			is_subject = no
			is_subject_of_type = tributary_state
			is_subject_of_type = native_reservation
		}
	}
}


# Third Rome Triggers
has_russian_government_interaction = {
	has_dlc = "Third Rome"
	OR = {
		has_reform = noble_elite_reform
		has_reform = presidential_despot_reform
		has_reform = peasants_republic
		has_reform = free_city
	}
}
#RIGHTS OF MAN TRIGGERS

#Ruler personality triggers
ruler_has_good_adm_personality = {
	has_dlc = "Rights of Man"
	OR = {
		ruler_has_personality = just_personality
		ruler_has_personality = righteous_personality
		ruler_has_personality = tolerant_personality
		ruler_has_personality = free_thinker_personality
		ruler_has_personality = calm_personality
		ruler_has_personality = zealot_personality
		ruler_has_personality = pious_personality
		ruler_has_personality = lawgiver_personality
		ruler_has_personality = midas_touched_personality
		ruler_has_personality = incorruptible_personality
		ruler_has_personality = architectural_visionary_personality
		ruler_has_personality = scholar_personality
	}
}

ruler_has_good_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		ruler_has_personality = careful_personality
		ruler_has_personality = entrepreneur_personality
		ruler_has_personality = industrious_personality
		ruler_has_personality = expansionist_personality
		ruler_has_personality = navigator_personality
		ruler_has_personality = well_connected_personality
		ruler_has_personality = secretive_personality
		ruler_has_personality = intricate_web_weaver_personality
		ruler_has_personality = benevolent_personality
		ruler_has_personality = charismatic_negotiator_personality
		ruler_has_personality = silver_tongue_personality
	}
}

ruler_has_good_mil_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		ruler_has_personality = bold_fighter_personality
		ruler_has_personality = tactical_genius_personality
		ruler_has_personality = fierce_negotiator_personality
		ruler_has_personality = conqueror_personality
		ruler_has_personality = strict_personality
		ruler_has_personality = inspiring_leader_personality
		ruler_has_personality = martial_educator_personality
		ruler_has_personality = kind_hearted_personality
	}
}

ruler_has_bad_adm_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		ruler_has_personality = embezzler_personality
		ruler_has_personality = sinner_personality
		ruler_has_personality = greedy_personality
		ruler_has_personality = obsessive_perfectionist_personality
	}
}

ruler_has_bad_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		ruler_has_personality = drunkard_personality
		ruler_has_personality = babbling_buffoon_personality
		ruler_has_personality = cruel_personality
		ruler_has_personality = naive_personality
		ruler_has_personality = malevolent_personality
		ruler_has_personality = loose_lips_personality
	}
}

ruler_has_bad_mil_personality = {
	has_dlc = "Rights of Man" 
	#OR = {
	ruler_has_personality = craven_personality
	#}
}

#Heir personality triggers
heir_has_good_adm_personality = {
	has_dlc = "Rights of Man"
	OR = {
		heir_has_personality = just_personality
		heir_has_personality = righteous_personality
		heir_has_personality = tolerant_personality
		heir_has_personality = free_thinker_personality
		heir_has_personality = calm_personality
		heir_has_personality = zealot_personality
		heir_has_personality = pious_personality
		heir_has_personality = lawgiver_personality
		heir_has_personality = midas_touched_personality
		heir_has_personality = incorruptible_personality
		heir_has_personality = architectural_visionary_personality
		heir_has_personality = scholar_personality
	}
}

heir_has_good_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		heir_has_personality = careful_personality
		heir_has_personality = entrepreneur_personality
		heir_has_personality = industrious_personality
		heir_has_personality = expansionist_personality
		heir_has_personality = navigator_personality
		heir_has_personality = well_connected_personality
		heir_has_personality = secretive_personality
		heir_has_personality = intricate_web_weaver_personality
		heir_has_personality = benevolent_personality
		heir_has_personality = charismatic_negotiator_personality
		heir_has_personality = silver_tongue_personality

	}
}

heir_has_good_mil_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		heir_has_personality = bold_fighter_personality
		heir_has_personality = tactical_genius_personality
		heir_has_personality = fierce_negotiator_personality
		heir_has_personality = conqueror_personality
		heir_has_personality = strict_personality
		heir_has_personality = inspiring_leader_personality
		heir_has_personality = martial_educator_personality
		heir_has_personality = kind_hearted_personality
	}
}

heir_has_bad_adm_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		heir_has_personality = embezzler_personality
		heir_has_personality = sinner_personality
		heir_has_personality = greedy_personality
		heir_has_personality = obsessive_perfectionist_personality
	}
}

heir_has_bad_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		heir_has_personality = drunkard_personality
		heir_has_personality = babbling_buffoon_personality
		heir_has_personality = cruel_personality
		heir_has_personality = naive_personality
		heir_has_personality = malevolent_personality
		heir_has_personality = loose_lips_personality
	}
}

heir_has_bad_mil_personality = {
	has_dlc = "Rights of Man" 
	#OR = {
	heir_has_personality = craven_personality
	#}
}

#Queen personality triggers
consort_has_good_adm_personality = {
	has_dlc = "Rights of Man"
	OR = {
		consort_has_personality = just_personality
		consort_has_personality = righteous_personality
		consort_has_personality = tolerant_personality
		consort_has_personality = free_thinker_personality
		consort_has_personality = calm_personality
		consort_has_personality = zealot_personality
		consort_has_personality = pious_personality
		consort_has_personality = lawgiver_personality
		consort_has_personality = midas_touched_personality
		consort_has_personality = incorruptible_personality
		consort_has_personality = architectural_visionary_personality
		consort_has_personality = scholar_personality
	}
}

consort_has_good_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		consort_has_personality = careful_personality
		consort_has_personality = entrepreneur_personality
		consort_has_personality = industrious_personality
		consort_has_personality = expansionist_personality
		consort_has_personality = navigator_personality
		consort_has_personality = well_connected_personality
		consort_has_personality = secretive_personality
		consort_has_personality = intricate_web_weaver_personality
		consort_has_personality = benevolent_personality
		consort_has_personality = charismatic_negotiator_personality
		consort_has_personality = silver_tongue_personality

	}
}

consort_has_good_mil_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		consort_has_personality = bold_fighter_personality
		consort_has_personality = tactical_genius_personality
		consort_has_personality = fierce_negotiator_personality
		consort_has_personality = conqueror_personality
		consort_has_personality = strict_personality
		consort_has_personality = inspiring_leader_personality
		consort_has_personality = martial_educator_personality
		consort_has_personality = kind_hearted_personality
	}
}

consort_has_bad_adm_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		consort_has_personality = embezzler_personality
		consort_has_personality = sinner_personality
		consort_has_personality = greedy_personality
		consort_has_personality = obsessive_perfectionist_personality
	}
}

consort_has_bad_dip_personality = {
	has_dlc = "Rights of Man" 
	OR = {
		consort_has_personality = drunkard_personality
		consort_has_personality = babbling_buffoon_personality
		consort_has_personality = cruel_personality
		consort_has_personality = naive_personality
		consort_has_personality = malevolent_personality
		consort_has_personality = loose_lips_personality
	}
}

consort_has_bad_mil_personality = {
	has_dlc = "Rights of Man" 
	#OR = {
	consort_has_personality = craven_personality
	#}
}												  
can_have_center_of_reformation_trigger = { #Province Scope
	#$RELIGION$ needs to match the religion of the center that is being spawned.
	is_in_capital_area = yes
	is_reformation_center = no
	is_island = no
	expelling_minorities = no
	development = 10
	NOT = {
		any_neighbor_province = {
			is_reformation_center = yes
		}
	}
	NOT = {
		any_province = {
			area = PREV
			is_reformation_center = yes
			religion = $RELIGION$
		}
	}
}

province_viable_for_industrialization_events_trigger = { #Province Scope
	is_state = yes
	NOT = { devastation = 1 }
	OR = {
		is_in_capital_area = yes
		continent = CAPITAL
	}
	enlightenment = 100
}

unindustrialized_province_trigger = { #Province Scope
	#NOT = { has_province_flag = canals_and_turnpikes_flag }
	#NOT = { has_province_flag = agricultural_revolution_province }
	NOT = { has_province_flag = had_economic_urbanization }
	NOT = { has_province_flag = swapped_to_cloth }
	NOT = { has_province_flag = swapped_to_paper }
	NOT = { has_province_flag = swapped_to_glass }
	NOT = { has_province_flag = industrial_urbanization }
	NOT = { has_province_flag = metalwork_center }
	NOT = { has_province_flag = textile_center }
	NOT = { has_province_flag = shipyards_of_x }
}

industrialized_province_trigger = { #Province Scope
	OR = {
		#has_province_flag = canals_and_turnpikes_flag
		#has_province_flag = agricultural_revolution_province
		has_province_flag = had_economic_urbanization 
		has_province_flag = swapped_to_cloth
		has_province_flag = swapped_to_paper
		has_province_flag = swapped_to_glass
		has_province_flag = industrial_urbanization
		has_province_flag = metalwork_center
		has_province_flag = textile_center
		has_province_flag = shipyards_of_x
	}
}

was_never_end_game_tag_trigger = {	#Country Scope
	always = yes
}


has_manufactory_trigger = { #Province Scope
	custom_trigger_tooltip = {
		tooltip = has_manufactory_trigger_tooltip
		OR = {
			has_building = wharf
			has_building = weapons
			has_building = textile
			has_building = tradecompany
			has_building = farm_estate
			has_building = mills
			has_building = furnace
			has_building = plantations
			has_building = ramparts
			has_building = soldier_households
			has_building = impressment_offices
			has_building = state_house
		}
	}
}

#Use this one if you want it to say which manufactory has to be built
# Does not include 1.30 manufactories
has_manufactory_no_custom_tooltip_trigger = { #Province Scope
	if = {
		limit = {
			OR = {
				trade_goods = naval_supplies
				trade_goods = fish
				trade_goods = salt
				trade_goods = algae
				trade_goods = crabs
			}
		}
		has_building = wharf
	}
	else_if = {
		limit = {
			OR = {
				trade_goods = copper
				trade_goods = iron
				trade_goods = weapons_and_armor
				trade_goods = corundum
				trade_goods = orichalcum
			}
		}
		has_building = weapons
	}
	else_if = {
		limit = {
			OR = {
				trade_goods = wool
				trade_goods = cloth
				trade_goods = silk
				trade_goods = dyes
				trade_goods = leather
			}
		}
		has_building = textile
	}
	else_if = {
		limit = {
			OR = {
				trade_goods = ivory
				trade_goods = slaves
				trade_goods = fur
				trade_goods = corals
				trade_goods = pearls
				trade_goods = slaves
			}
		}
		has_building = tradecompany
	}
	else_if = {
		limit = {
			OR = {
				trade_goods = livestock
				trade_goods = wine
				trade_goods = crops
				trade_goods = fruits_and_vegetables
				trade_goods = mushrooms
			}
		}
		has_building = farm_estate
	}
	else_if = {
		limit = {
			OR = {
				trade_goods = paper
				trade_goods = gems
				trade_goods = 	glass
				trade_goods = 	wood
				trade_goods = potions
			}
		}
		has_building = mills
	}
	else_if = {
		limit = {
			OR = {
				trade_goods = coal
				trade_goods = ebony
				trade_goods = stalhrim
				trade_goods = moonstone
				trade_goods = quicksilver 
				trade_goods = malachite
				trade_goods = silver 
			}
		}
		has_building = furnace
	}
	else = {
		has_building = plantations
	}
}

has_no_manufactory_trigger = { #Province Scope
	NOT = { has_building = wharf }
	NOT = { has_building = weapons }
	NOT = { has_building = textile }
	NOT = { has_building = tradecompany }
	NOT = { has_building = farm_estate }
	NOT = { has_building = mills }
	NOT = { has_building = plantations }
	NOT = { has_building = furnace }
	NOT = { has_building = ramparts }
	NOT = { has_building = soldier_households }
	NOT = { has_building = impressment_offices }
	NOT = { has_building = state_house }
}

# Does not include new manufactories - they don't fit for the purposes of this trigger
root_can_build_manufactory_here_trigger = {
    has_no_manufactory_trigger = yes
    num_free_building_slots = 1
    if = {
        limit = {
            OR = {
                trade_goods = naval_supplies
				trade_goods = fish
				trade_goods = salt
				trade_goods = algae
				trade_goods = crabs
            }
        }
        ROOT = { dip_tech = 15 }
    }
    else_if = {
        limit = {
            OR = {
                trade_goods = copper
				trade_goods = iron
				trade_goods = weapons_and_armor
				trade_goods = corundum
				trade_goods = orichalcum
			}
        }
        ROOT = { mil_tech = 25 }
    }
    else_if = {
        limit = {
            OR = {
                trade_goods = wool
				trade_goods = cloth
				trade_goods = silk
				trade_goods = dyes
				trade_goods = leather
            }
        }
        ROOT = { adm_tech = 10 }
    }
    else_if = {
        limit = {
            OR = {
                trade_goods = coal
				trade_goods = ebony
				trade_goods = stalhrim
				trade_goods = moonstone
				trade_goods = quicksilver 
				trade_goods = malachite
				trade_goods = silver 
            }
        }
        ROOT = { adm_tech = 20 }
    }
    else_if = {
        limit = {
            OR = {
                trade_goods = ivory
				trade_goods = slaves
				trade_goods = fur
				trade_goods = corals
				trade_goods = pearls
				trade_goods = slaves
            }
        }
        ROOT = { dip_tech = 35 }
    }
    else_if = {
        limit = {
            OR = {
                trade_goods = livestock
				trade_goods = wine
				trade_goods = crops
				trade_goods = fruits_and_vegetables
				trade_goods = mushrooms
            }
        }
        ROOT = { adm_tech = 30 }
    }
    else_if = {
        limit = {
            OR = {
				trade_goods = paper
				trade_goods = gems
				trade_goods = 	glass
				trade_goods = 	wood
				trade_goods = potions
            }
        }
        ROOT = { adm_tech = 40 }
    }
    else_if = {
        limit = {
            trade_goods = coal
        }
        ROOT = { adm_tech = 50 }
    }
}

has_nobles_trade_good_trigger = {
	OR = {
		trade_goods = copper
		trade_goods = iron
		trade_goods = livestock
		trade_goods = gems
		trade_goods = slaves
	}
}

has_burghers_trade_good_trigger = {
	OR = {
		trade_goods = naval_supplies
		trade_goods = salt
		trade_goods = cloth
		trade_goods = silk
		trade_goods = dyes
		trade_goods = coal
		trade_goods = glass
		trade_goods = paper
		trade_goods = ivory
		trade_goods = fish
	}
}

has_church_trade_good_trigger = {
	OR = {
		trade_goods = wool
		trade_goods = fur
		trade_goods = wine
		trade_goods = slaves
		trade_goods = fish
	}
}
has_dharma_elephants_trigger = {
	OR = {
		has_dlc = "Dharma"
		has_dlc = "Dharma - Indian Sultanate Pack"
		has_dlc = "Dharma - Hindu Unit Pack"
	}
	culture_group = tangmo_cg
}

# This is for when we want to award government reform progress and need to check if that's useful to the player based on dlc ownership
has_completed_all_reforms_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_completed_all_reforms_trigger_tooltip
		NOT = { has_dlc = "Emperor" }
		OR = {
			has_reform = a_better_world
			has_reform = unification
			has_reform = one_faith
			has_reform = greatness
		}
	}
}

# This is for all other situations
has_final_tier_reforms_trigger = {
	custom_trigger_tooltip = {
		tooltip = has_completed_all_reforms_trigger_tooltip
		OR = {
			has_reform = a_better_world
			has_reform = unification
			has_reform = one_faith
			has_reform = greatness
		}
	}
}

has_holy_order_trigger = {
	custom_trigger_tooltip = {
		tooltip = "has_holy_order_trigger_tooltip"
		OR = {
			holy_order = order_of_the_lamp
			holy_order = vampyrum_order
			holy_order = order_of_the_hour
			holy_order = order_of_doctrine_and_ordination
			holy_order = order_of_the_watch
			holy_order = order_of_inquisition
			holy_order = baldama_wyrd_order 
			holy_order = order_of_the_raven
			holy_order = order_of_saint_pelin
			holy_order = sapiarchs_order
			holy_order = order_of_the_candle
			holy_order = order_of_diagna
		}
	}
}

same_govt_as_root_trigger = {
	custom_trigger_tooltip = {
		tooltip = same_govt_as_root_tt
		OR = {
			AND = {
				government = theocracy
				root = {
					government = theocracy
				}
			}
			AND = {
				government = monarchy
				root = {
					government = monarchy
				}
			}
			AND = {
				government = republic
				root = {
					government = republic
				}
			}
			AND = {
				government = dictatorship
				root = {
					government = dictatorship
				}
			}
			AND = {
				government = tribal
				root = {
					government = tribal
				}
			}
			AND = {
				government = native
				root = {
					government = native
				}
			}
		}
	}
}

# Building triggers

has_tax_building_trigger = {
	OR = {
		has_building = temple
		has_building = cathedral
	}
}

has_trade_building_trigger = {
	OR = {
		has_building = marketplace
		has_building = trade_depot
		has_building = stock_exchange
	}
}

has_production_building_trigger = {
	OR = {
		has_building = workshop
		has_building = counting_house
	}
}

has_manpower_building_trigger = {
	OR = {
		has_building = barracks
		has_building = training_fields
	}
}

has_shipyard_building_trigger = {
	OR = {
		has_building = shipyard
		has_building = grand_shipyard
	}
}

has_dock_building_trigger = {
	OR = {
		has_building = dock
		has_building = drydock
	}
}

has_forcelimit_building_trigger = {
	OR = {
		has_building = regimental_camp
		has_building = conscription_center
	}
}

has_courthouse_building_trigger = {
	OR = {	
		has_building = courthouse
		has_building = town_hall
	}
}

has_fort_building_trigger = {
	OR = {
		has_building = fort_15th
		has_building = fort_16th
		has_building = fort_17th
		has_building = fort_18th
	}
}
has_been_insulted_by_root = {
	custom_trigger_tooltip = {
		tooltip = has_been_insulted_by_root
		OR = {
			has_opinion_modifier = {
				who = ROOT
				modifier = insulted
			}
			has_opinion_modifier = {
				who = ROOT
				modifier = scornfully_insulted
			}
		}
	}
}

valid_for_personal_unions_trigger = {
	is_subject = no
	government = monarchy
}

is_shadow_kingdom_eligible_trigger = {
	is_emperor = no
	is_part_of_hre = yes
	OR = {
		capital_scope = { OR = { region = summerset_lr region = auridon_lr } }
		AND = {
			culture_group = high_elves_cg
			any_owned_province = {
				OR = { region = summerset_lr region = auridon_lr }
			}
		}
	}
}

will_leave_for_shadow_kingdom_trigger = {
	NOT = {
		OR = {
			emperor = {
				alliance_with = PREV
			}
			has_opinion = {
				who = emperor
				value = 150
			}
			is_subject_of = emperor
			has_reform = free_city
		}
	}
}


is_germanic_but_not_swamp = {
}

is_germanic_but_not_mountains = {
}

#province scope; checks it is highest or joint highest supply limit in the area owned by you (useful for spawning rebels)
highest_supply_limit_in_area = {
	NOT = {
		area_for_scope_province = { 
			NOT = { province_id = prev }
			owned_by = root
			supply_limit = prev 
			NOT = { prev = { supply_limit = prev } }
		}
	}
}

# Has current fort level
province_has_current_tech_fort_trigger = {
	custom_trigger_tooltip = {
		tooltip = province_has_current_tech_fort_trigger_tt
		if = {
			limit = {
				owner = {
					NOT = { mil_tech = 14 }
				}
			}
			has_building = fort_15th
		}
		else_if = {
			limit = {
				owner = {
					AND = {
						mil_tech = 14
						NOT = { mil_tech = 19 }
					}
				}
			}
			has_building = fort_16th
		}
		else_if = {
			limit = {
				owner = {
					AND = {
						mil_tech = 19
						NOT = { mil_tech = 24 }
					}
				}
			}
			has_building = fort_17th
		}
		else_if = {
			limit = {
				owner = {
					mil_tech = 24
				}
			}
			has_building = fort_18th
		}
	}
}



check_reducing_estate_revolt_size_trigger = {
	if = {
		limit = {
			NOT = { num_of_cities = 16 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 2
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 24 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 3
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 36 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 4
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 56 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 5
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 80 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 6
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 100 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 7
				has_province_flag = $FLAG$
			}
		}
	}
	else = {
		NOT = {
			num_of_owned_provinces_with = {
				value = 8
				has_province_flag = $FLAG$
			}
		}
	}
}

check_reducing_estate_revolt_size_more_trigger = {
	if = {
		limit = {
			NOT = { num_of_cities = 10 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 2
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 16 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 3
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 24 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 4
				has_province_flag = $FLAG$
			}
		}
	}
	else_if = {
		limit = {
			NOT = { num_of_cities = 36 }
		}
		NOT = {
			num_of_owned_provinces_with = {
				value = 5
				has_province_flag = $FLAG$
			}
		}
	}
	else = {
		NOT = {
			num_of_owned_provinces_with = {
				value = 6
				has_province_flag = $FLAG$
			}
		}
	}
}

is_revolutionary_republic_trigger = {
	OR = {
		has_reform = revolutionary_republic_reform
		has_reform = junior_revolutionary_republic_reform
	}
}

revolution_event_can_happen_trigger = {
	OR = {
		revolution_target_exists = no
		has_dlc = "Emperor"
	}
	OR = {
		capital_scope = { 
			controlled_by = REB
		}
		has_country_modifier = just_lost_to_revolutionary_rebels
		has_country_flag = revolution_disaster_immediate_revolution
	}
	num_of_cities = 10
	is_revolutionary = no
}
#country scope, used in election events to check whether generated rulers may be female
republic_with_female_rulers_trigger = {
	OR = {
		has_country_modifier = sister_suffragettes
		has_country_modifier = mary_inheritance_reforms
	}
}

is_absolutism_active = {
	OR = {
		current_age = es_age_of_disasters
		current_age = es_age_of_renascense
		current_age = es_age_of_invasions
		current_age = es_age_of_empires
		current_age = es_age_of_internal_conflicts
		current_age = es_age_of_unification
		current_age = es_age_of_great_wars
	}
}

#Country scope
is_or_was_tag = {
	OR = {
		tag = $tag$
		was_tag = $tag$
	}
}   

gained_development_from_building = {
	has_province_flag = built_dev_$building$
}

gained_development_from_any_building = {
	OR = {
		has_province_flag = built_dev_marketplace
		has_province_flag = built_dev_workshop
		has_province_flag = built_dev_temple
		has_province_flag = built_dev_barracks
		has_province_flag = built_dev_shipyard
		has_province_flag = built_dev_courthouse
		has_province_flag = built_dev_dock
		has_province_flag = built_dev_regimental_camp
		has_province_flag = built_dev_cathedral
		has_province_flag = built_dev_university
		has_province_flag = built_dev_trade_depot
		has_province_flag = built_dev_grand_shipyard
		has_province_flag = built_dev_training_fields
		has_province_flag = built_dev_stock_exchange
		has_province_flag = built_dev_counting_house
		has_province_flag = built_dev_town_hall
		has_province_flag = built_dev_drydock
		has_province_flag = built_dev_conscription_center
		has_province_flag = built_dev_manufactory
	}
}

province_is_or_accepts_culture = {
	OR = {
		has_owner_culture = yes
		has_owner_accepted_culture = yes
	}
}

has_unlocked_estate_privilege = {
	has_country_flag = unlocked_privilege_$estate_privilege$
}

has_unlocked_merc_company = {
	has_country_flag = unlocked_$merc_company$
}

is_same_superregion_country = {
	OR = {
		AND = {
			$first$ = { capital_scope = { superregion = pyandonea_superregion } }
			$second$ = { capital_scope = { superregion = pyandonea_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = summerset_islands_superregion } }
			$second$ = { capital_scope = { superregion = summerset_islands_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = valenwood_superregion } }
			$second$ = { capital_scope = { superregion = valenwood_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = elsweyr_superregion } }
			$second$ = { capital_scope = { superregion = elsweyr_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = morrowind_superregion } }
			$second$ = { capital_scope = { superregion = morrowind_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = black_marsh_superregion } }
			$second$ = { capital_scope = { superregion = black_marsh_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = cyrodiil_superregion } }
			$second$ = { capital_scope = { superregion = cyrodiil_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = hammerfell_superregion } }
			$second$ = { capital_scope = { superregion = hammerfell_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = high_rock_superregion } }
			$second$ = { capital_scope = { superregion = high_rock_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = skyrim_superregion } }
			$second$ = { capital_scope = { superregion = skyrim_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = yokuda_superregion } }
			$second$ = { capital_scope = { superregion = yokuda_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = atmora_superregion } }
			$second$ = { capital_scope = { superregion = atmora_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = kamal_superregion } }
			$second$ = { capital_scope = { superregion = kamal_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = thousand_superregion } }
			$second$ = { capital_scope = { superregion = thousand_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = po_tun_superregion } }
			$second$ = { capital_scope = { superregion = po_tun_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = tsakara_superregion } }
			$second$ = { capital_scope = { superregion = tsakara_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = upper_akavir_superregion } }
			$second$ = { capital_scope = { superregion = upper_akavir_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = northern_islands_superregion } }
			$second$ = { capital_scope = { superregion = northern_islands_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = deadlands_superregion } }
			$second$ = { capital_scope = { superregion = deadlands_superregion } }
		}
		AND = {
			$first$ = { capital_scope = { superregion = coldharbour_superregion } }
			$second$ = { capital_scope = { superregion = coldharbour_superregion } }
		}
	}
}