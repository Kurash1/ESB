#All scopes are country scope
#All parameters are optional
organize_commercial_zones = {
	icon = privilege_organize_commercial_zones
	max_absolutism = 0	#Change in max absolutism while this privilege is enacted
	loyalty = 0.1	#Change in percent loyalty caused by this privilege
	influence = 0.1	#Change in percent influence caused by this privilege
	#Conditions for whether it is possible for the country to have this privilege
	is_valid = {
		always = yes
	}
	#Conditions for whether the country is allowed to select the privilege
	can_select = {
	}
	#Effects executed immediately upon the privilege being taken
	on_granted = {
		add_years_of_income = -0.25
	}
	#Conditions for whether the country can revoke the privilege
	can_revoke = {
	}
	#Effects executed upon the privilege being revoked by the country
	on_revoked = {
		change_estate_land_share = {
			estate = estate_merchants
			share = -5
		}
		add_estate_loyalty = {
			estate = estate_merchants
			loyalty = -0.15
		}
	}
	#Effects executed upon the privilege being removed due to invalidity
	on_invalid = {
	}
	#Negative modifiers granted while the privilege is active
	penalties = {
		global_autonomy = 0.05
	}
	#Positive modifiers granted while the privilege is active
	benefits = {
		trade_efficiency = 0.1
	}
	# conditional_modifier = {
	# 	#Modifier that are applied if the specified conditions are true.
	# 	trigger = {
	# 		<triggers>
	# 	}
	# 	modifier = {
	# 		<modifiers>
	# 	}
	# 	is_bad = <bool>		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	# }
	modifier_by_land_ownership = {
		caravan_power = 0.33
	}
	#Multiplies the modifier by the % of land owned by the estate.
	# mechanics = {
	# 	<mechanics>
	# }	#Special mechanics the privilege enables
	cooldown_years = 5	#Time limit before which the privilege cannot be revoked
	on_cooldown_expires = {
	}
	#Effect executed once the specified cooldown_years timer has run down
	ai_will_do = {
		#If above ESTATE_PRIVILEGE_GRANT_THRESHOLD define, AI will try to apply. If below 
		factor = 1		#ESTATE_PRIVILEGE_REVOKE_THRESHOLD, AI will try to revoke.
	}
}

recruit_admirals = {
	icon = privilege_recruit_admirals
	max_absolutism = -5	#Change in max absolutism while this privilege is enacted
	loyalty = 0.1	#Change in percent loyalty caused by this privilege
	influence = 0.1	#Change in percent influence caused by this privilege
	#Conditions for whether it is possible for the country to have this privilege
	is_valid = {
		num_of_total_ports = 1
	}
	#Conditions for whether the country is allowed to select the privilege
	can_select = {
	}
	#Effects executed immediately upon the privilege being taken
	on_granted = {
		add_navy_tradition = 15
	}
	#Conditions for whether the country can revoke the privilege
	can_revoke = {
	}
	#Effects executed upon the privilege being revoked by the country
	on_revoked = {
		add_navy_tradition = -20
	}
	#Effects executed upon the privilege being removed due to invalidity
	on_invalid = {
	}
	#Negative modifiers granted while the privilege is active
	penalties = {
		yearly_corruption = 0.025
	}
	#Positive modifiers granted while the privilege is active
	benefits = {
		admiral_cost = -0.5
	}
	# conditional_modifier = {
	# 	#Modifier that are applied if the specified conditions are true.
	# 	trigger = {
	# 		<triggers>
	# 	}
	# 	modifier = {
	# 		<modifiers>
	# 	}
	# 	is_bad = <bool>		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	# }
	modifier_by_land_ownership = {
	}
	#Multiplies the modifier by the % of land owned by the estate.
	# mechanics = {
	# 	<mechanics>
	# }	#Special mechanics the privilege enables
	cooldown_years = 5	#Time limit before which the privilege cannot be revoked
	on_cooldown_expires = {
	}
	#Effect executed once the specified cooldown_years timer has run down
	ai_will_do = {
		#If above ESTATE_PRIVILEGE_GRANT_THRESHOLD define, AI will try to apply. If below 
		factor = 1		#ESTATE_PRIVILEGE_REVOKE_THRESHOLD, AI will try to revoke.
	}
}

sponsor_foreign_trade = {
	icon = privilege_sponsor_foreign_trade
	max_absolutism = -5	#Change in max absolutism while this privilege is enacted
	loyalty = 0.1	#Change in percent loyalty caused by this privilege
	influence = 0.1	#Change in percent influence caused by this privilege
	#Conditions for whether it is possible for the country to have this privilege
	is_valid = {
	}
	#Conditions for whether the country is allowed to select the privilege
	can_select = {
		calc_true_if = {
			all_active_trade_node = {
				always = yes
			}
			amount = 3
		}
	}
	#Effects executed immediately upon the privilege being taken
	on_granted = {
		add_years_of_income = 0.5
	}
	#Conditions for whether the country can revoke the privilege
	can_revoke = {
	}
	#Effects executed upon the privilege being revoked by the country
	on_revoked = {
	}
	#Effects executed upon the privilege being removed due to invalidity
	on_invalid = {
	}
	#Negative modifiers granted while the privilege is active
	penalties = {
		global_own_trade_power = -0.1
	}
	#Positive modifiers granted while the privilege is active
	benefits = {
		merchants = 1
		trade_range_modifier = 0.25
	}
	# conditional_modifier = {
	# 	#Modifier that are applied if the specified conditions are true.
	# 	trigger = {
	# 		<triggers>
	# 	}
	# 	modifier = {
	# 		<modifiers>
	# 	}
	# 	is_bad = <bool>		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	# }
	modifier_by_land_ownership = {
	}
	#Multiplies the modifier by the % of land owned by the estate.
	# mechanics = {
	# 	<mechanics>
	# }	#Special mechanics the privilege enables
	cooldown_years = 5	#Time limit before which the privilege cannot be revoked
	on_cooldown_expires = {
	}
	#Effect executed once the specified cooldown_years timer has run down
	ai_will_do = {
		#If above ESTATE_PRIVILEGE_GRANT_THRESHOLD define, AI will try to apply. If below 
		factor = 1		#ESTATE_PRIVILEGE_REVOKE_THRESHOLD, AI will try to revoke.
	}
}

grant_additional_loans = {
	icon = privilege_grant_additional_loans
	max_absolutism = 5	#Change in max absolutism while this privilege is enacted
	loyalty = 0	#Change in percent loyalty caused by this privilege
	influence = -0.1	#Change in percent influence caused by this privilege
	#Conditions for whether it is possible for the country to have this privilege
	is_valid = {
	}
	#Conditions for whether the country is allowed to select the privilege
	can_select = {
		years_of_income = 0.5
	}
	#Effects executed immediately upon the privilege being taken
	on_granted = {
		add_years_of_income = -0.5
	}
	#Conditions for whether the country can revoke the privilege
	can_revoke = {
	}
	#Effects executed upon the privilege being revoked by the country
	on_revoked = {
	}
	#Effects executed upon the privilege being removed due to invalidity
	on_invalid = {
	}
	#Negative modifiers granted while the privilege is active
	penalties = {
		global_regiment_cost = 0.1
		global_ship_cost = 0.1
	}
	#Positive modifiers granted while the privilege is active
	benefits = {
		production_efficiency = 0.05
		trade_efficiency = 0.05
		inflation_reduction = 0.01
	}
	# conditional_modifier = {
	# 	#Modifier that are applied if the specified conditions are true.
	# 	trigger = {
	# 		<triggers>
	# 	}
	# 	modifier = {
	# 		<modifiers>
	# 	}
	# 	is_bad = <bool>		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	# }
	modifier_by_land_ownership = {
	}
	#Multiplies the modifier by the % of land owned by the estate.
	# mechanics = {
	# 	<mechanics>
	# }	#Special mechanics the privilege enables
	cooldown_years = 5	#Time limit before which the privilege cannot be revoked
	on_cooldown_expires = {
	}
	#Effect executed once the specified cooldown_years timer has run down
	ai_will_do = {
		#If above ESTATE_PRIVILEGE_GRANT_THRESHOLD define, AI will try to apply. If below 
		factor = 1		#ESTATE_PRIVILEGE_REVOKE_THRESHOLD, AI will try to revoke.
	}
}

allow_private_trade_fleets = {
	icon = privilege_allow_private_trade_fleets
	max_absolutism = -10	#Change in max absolutism while this privilege is enacted
	loyalty = 0.05	#Change in percent loyalty caused by this privilege
	influence = 0.15	#Change in percent influence caused by this privilege
	#Conditions for whether it is possible for the country to have this privilege
	is_valid = {
	}
	#Conditions for whether the country is allowed to select the privilege
	can_select = {
	}
	#Effects executed immediately upon the privilege being taken
	on_granted = {
		add_yearly_sailors = -1
	}
	#Conditions for whether the country can revoke the privilege
	can_revoke = {
	}
	#Effects executed upon the privilege being revoked by the country
	on_revoked = {
	}
	#Effects executed upon the privilege being removed due to invalidity
	on_invalid = {
	}
	#Negative modifiers granted while the privilege is active
	penalties = {
		global_sailors_modifier = -0.15
	}
	#Positive modifiers granted while the privilege is active
	benefits = {
		privateer_efficiency = 0.2
	}
	# conditional_modifier = {
	# 	#Modifier that are applied if the specified conditions are true.
	# 	trigger = {
	# 		<triggers>
	# 	}
	# 	modifier = {
	# 		<modifiers>
	# 	}
	# 	is_bad = <bool>		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	# }
	modifier_by_land_ownership = {
	}
	#Multiplies the modifier by the % of land owned by the estate.
	# mechanics = {
	# 	<mechanics>
	# }	#Special mechanics the privilege enables
	cooldown_years = 5	#Time limit before which the privilege cannot be revoked
	on_cooldown_expires = {
	}
	#Effect executed once the specified cooldown_years timer has run down
	ai_will_do = {
		#If above ESTATE_PRIVILEGE_GRANT_THRESHOLD define, AI will try to apply. If below 
		factor = 1		#ESTATE_PRIVILEGE_REVOKE_THRESHOLD, AI will try to revoke.
	}
}

merchants_council = {
	icon = privilege_merchants_council
	max_absolutism = -15	#Change in max absolutism while this privilege is enacted
	loyalty = 0.15	#Change in percent loyalty caused by this privilege
	influence = 0.15	#Change in percent influence caused by this privilege
	#Conditions for whether it is possible for the country to have this privilege
	is_valid = {
	}
	#Conditions for whether the country is allowed to select the privilege
	can_select = {
	}
	#Effects executed immediately upon the privilege being taken
	on_granted = {
	}
	#Conditions for whether the country can revoke the privilege
	can_revoke = {
		NOT = {
			estate_influence = {
				estate = estate_merchants
				influence = 50
			}
		}
	}
	#Effects executed upon the privilege being revoked by the country
	on_revoked = {
		random_owned_province = {
			spawn_rebels = {
				type = noble_rebels
				size = 3
			}
		}
	}
	#Effects executed upon the privilege being removed due to invalidity
	on_invalid = {
	}
	#Negative modifiers granted while the privilege is active
	penalties = {
		legitimacy = -0.5
		republican_tradition = -0.5
		devotion = -0.5
		horde_unity = -0.5
		meritocracy = -0.5
	}
	#Positive modifiers granted while the privilege is active
	benefits = {
		global_ship_recruit_speed = -0.25
		global_ship_cost = -0.25

	}
	# conditional_modifier = {
	# 	#Modifier that are applied if the specified conditions are true.
	# 	trigger = {
	# 		<triggers>
	# 	}
	# 	modifier = {
	# 		<modifiers>
	# 	}
	# 	is_bad = <bool>		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	# }
	modifier_by_land_ownership = {
	}
	#Multiplies the modifier by the % of land owned by the estate.
	mechanics = {
		can_give_agendas_without_interaction
	}
	#Special mechanics the privilege enables
	cooldown_years = 5	#Time limit before which the privilege cannot be revoked
	on_cooldown_expires = {
	}
	#Effect executed once the specified cooldown_years timer has run down
	ai_will_do = {
		#If above ESTATE_PRIVILEGE_GRANT_THRESHOLD define, AI will try to apply. If below 
		factor = 1		#ESTATE_PRIVILEGE_REVOKE_THRESHOLD, AI will try to revoke.
	}
}

reserve_right_to_trade_ebony = {
	icon = privilege_reserve_right_to_trade_ebony
	max_absolutism = 5	#Change in max absolutism while this privilege is enacted
	loyalty = -0.15	#Change in percent loyalty caused by this privilege
	influence = -0.1	#Change in percent influence caused by this privilege
	#Conditions for whether it is possible for the country to have this privilege
	is_valid = {
		any_owned_province = {
			trade_goods = ebony
		}
	}
	#Conditions for whether the country is allowed to select the privilege
	can_select = {
		estate_loyalty = {
			estate = estate_merchants
			loyalty = 30
		}
	}
	#Effects executed immediately upon the privilege being taken
	on_granted = {
		add_prestige = 5
	}
	#Conditions for whether the country can revoke the privilege
	can_revoke = {
	}
	#Effects executed upon the privilege being revoked by the country
	on_revoked = {
	}
	#Effects executed upon the privilege being removed due to invalidity
	on_invalid = {
	}
	#Negative modifiers granted while the privilege is active
	penalties = {
	}
	#Positive modifiers granted while the privilege is active
	benefits = {
		shock_damage_received = -0.05
		fire_damage_received = -0.05
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			NOT = {
				num_of_owned_provinces_with = {
					value = 5
					trade_goods = ebony
				}
			}
		}
		modifier = {
			trade_efficiency = 0.05
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			num_of_owned_provinces_with = {
				value = 5
				trade_goods = ebony
			}
			NOT = {
				num_of_owned_provinces_with = {
					value = 15
					trade_goods = ebony
				}
			}
		}
		modifier = {
			trade_efficiency = 0.075
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			num_of_owned_provinces_with = {
				value = 15
				trade_goods = ebony
			}
		}
		modifier = {
			trade_efficiency = 0.1
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	modifier_by_land_ownership = {
	}
	#Multiplies the modifier by the % of land owned by the estate.
	# mechanics = {
	# 	<mechanics>
	# }	#Special mechanics the privilege enables
	#Time limit before which the privilege cannot be revoked
	on_cooldown_expires = {
	}
	#Effect executed once the specified cooldown_years timer has run down
	ai_will_do = {
		#If above ESTATE_PRIVILEGE_GRANT_THRESHOLD define, AI will try to apply. If below 
		factor = 1		#ESTATE_PRIVILEGE_REVOKE_THRESHOLD, AI will try to revoke.
	}
}

reserve_right_to_trade_glass = {
	icon = privilege_reserve_right_to_trade_glass
	max_absolutism = 5	#Change in max absolutism while this privilege is enacted
	loyalty = -0.15	#Change in percent loyalty caused by this privilege
	influence = -0.1	#Change in percent influence caused by this privilege
	#Conditions for whether it is possible for the country to have this privilege
	is_valid = {
		any_owned_province = {
			trade_goods = glass
		}
	}
	#Conditions for whether the country is allowed to select the privilege
	can_select = {
		estate_loyalty = {
			estate = estate_merchants
			loyalty = 30
		}
	}
	#Effects executed immediately upon the privilege being taken
	on_granted = {
		add_prestige = 5
	}
	#Conditions for whether the country can revoke the privilege
	can_revoke = {
	}
	#Effects executed upon the privilege being revoked by the country
	on_revoked = {
	}
	#Effects executed upon the privilege being removed due to invalidity
	on_invalid = {
	}
	#Negative modifiers granted while the privilege is active
	penalties = {
	}
	#Positive modifiers granted while the privilege is active
	benefits = {
		prestige_decay = -0.01
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			NOT = {
				num_of_owned_provinces_with = {
					value = 5
					trade_goods = glass
				}
			}
		}
		modifier = {
			trade_efficiency = 0.05
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			num_of_owned_provinces_with = {
				value = 5
				trade_goods = glass
			}
			NOT = {
				num_of_owned_provinces_with = {
					value = 15
					trade_goods = glass
				}
			}
		}
		modifier = {
			trade_efficiency = 0.075
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			num_of_owned_provinces_with = {
				value = 15
				trade_goods = glass
			}
		}
		modifier = {
			trade_efficiency = 0.1
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	modifier_by_land_ownership = {
	}
	#Multiplies the modifier by the % of land owned by the estate.
	# mechanics = {
	# 	<mechanics>
	# }	#Special mechanics the privilege enables
	#Time limit before which the privilege cannot be revoked
	on_cooldown_expires = {
	}
	#Effect executed once the specified cooldown_years timer has run down
	ai_will_do = {
		#If above ESTATE_PRIVILEGE_GRANT_THRESHOLD define, AI will try to apply. If below 
		factor = 1		#ESTATE_PRIVILEGE_REVOKE_THRESHOLD, AI will try to revoke.
	}
}

reserve_right_to_trade_stalhrim = {
	icon = privilege_reserve_right_to_trade_stalhrim
	max_absolutism = 5	#Change in max absolutism while this privilege is enacted
	loyalty = -0.15	#Change in percent loyalty caused by this privilege
	influence = -0.1	#Change in percent influence caused by this privilege
	#Conditions for whether it is possible for the country to have this privilege
	is_valid = {
		any_owned_province = {
			trade_goods = stalhrim
		}
	}
	#Conditions for whether the country is allowed to select the privilege
	can_select = {
		estate_loyalty = {
			estate = estate_merchants
			loyalty = 30
		}
	}
	#Effects executed immediately upon the privilege being taken
	on_granted = {
		add_prestige = 5
	}
	#Conditions for whether the country can revoke the privilege
	can_revoke = {
	}
	#Effects executed upon the privilege being revoked by the country
	on_revoked = {
	}
	#Effects executed upon the privilege being removed due to invalidity
	on_invalid = {
	}
	#Negative modifiers granted while the privilege is active
	penalties = {
	}
	#Positive modifiers granted while the privilege is active
	benefits = {
		land_maintenance_modifier = -0.1
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			NOT = {
				num_of_owned_provinces_with = {
					value = 5
					trade_goods = stalhrim
				}
			}
		}
		modifier = {
			trade_efficiency = 0.05
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			num_of_owned_provinces_with = {
				value = 5
				trade_goods = stalhrim
			}
			NOT = {
				num_of_owned_provinces_with = {
					value = 15
					trade_goods = stalhrim
				}
			}
		}
		modifier = {
			trade_efficiency = 0.075
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			num_of_owned_provinces_with = {
				value = 15
				trade_goods = stalhrim
			}
		}
		modifier = {
			trade_efficiency = 0.1
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	modifier_by_land_ownership = {
	}
	#Multiplies the modifier by the % of land owned by the estate.
	# mechanics = {
	# 	<mechanics>
	# }	#Special mechanics the privilege enables
	#Time limit before which the privilege cannot be revoked
	on_cooldown_expires = {
	}
	#Effect executed once the specified cooldown_years timer has run down
	ai_will_do = {
		#If above ESTATE_PRIVILEGE_GRANT_THRESHOLD define, AI will try to apply. If below 
		factor = 1		#ESTATE_PRIVILEGE_REVOKE_THRESHOLD, AI will try to revoke.
	}
}

reserve_right_to_trade_dwemer_metal = {
	icon = privilege_reserve_right_to_trade_dwemer_metal
	max_absolutism = 5	#Change in max absolutism while this privilege is enacted
	loyalty = -0.15	#Change in percent loyalty caused by this privilege
	influence = -0.1	#Change in percent influence caused by this privilege
	#Conditions for whether it is possible for the country to have this privilege
	is_valid = {
		any_owned_province = {
			trade_goods = dwemer_metal
		}
	}
	#Conditions for whether the country is allowed to select the privilege
	can_select = {
		estate_loyalty = {
			estate = estate_merchants
			loyalty = 30
		}
	}
	#Effects executed immediately upon the privilege being taken
	on_granted = {
		add_prestige = 5
	}
	#Conditions for whether the country can revoke the privilege
	can_revoke = {
	}
	#Effects executed upon the privilege being revoked by the country
	on_revoked = {
	}
	#Effects executed upon the privilege being removed due to invalidity
	on_invalid = {
	}
	#Negative modifiers granted while the privilege is active
	penalties = {
	}
	#Positive modifiers granted while the privilege is active
	benefits = {
		production_efficiency = 0.1
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			NOT = {
				num_of_owned_provinces_with = {
					value = 5
					trade_goods = dwemer_metal
				}
			}
		}
		modifier = {
			trade_efficiency = 0.05
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			num_of_owned_provinces_with = {
				value = 5
				trade_goods = dwemer_metal
			}
			NOT = {
				num_of_owned_provinces_with = {
					value = 15
					trade_goods = dwemer_metal
				}
			}
		}
		modifier = {
			trade_efficiency = 0.075
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	conditional_modifier = {
		#Modifier that are applied if the specified conditions are true.
		trigger = {
			num_of_owned_provinces_with = {
				value = 15
				trade_goods = dwemer_metal
			}
		}
		modifier = {
			trade_efficiency = 0.1
		}
		is_bad = no		#yes/no. Whether the modifier should be listed as positive or negative in the tooltips.
	}
	modifier_by_land_ownership = {
	}
	#Multiplies the modifier by the % of land owned by the estate.
	# mechanics = {
	# 	<mechanics>
	# }	#Special mechanics the privilege enables
	#Time limit before which the privilege cannot be revoked
	on_cooldown_expires = {
	}
	#Effect executed once the specified cooldown_years timer has run down
	ai_will_do = {
		#If above ESTATE_PRIVILEGE_GRANT_THRESHOLD define, AI will try to apply. If below 
		factor = 1		#ESTATE_PRIVILEGE_REVOKE_THRESHOLD, AI will try to revoke.
	}
}
