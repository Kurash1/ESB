#AVIALABLE CUSTOM LOCALISATION KEYS
#When adding new custom loc keys, add them to the appropriate category (or add a new one) and describe them. Name the strings "String_X" where x is its content.
# To not display anything, you can use 'localisation_key = ""'
# Please add one example sentence for each key.

#As this list grow organize with categories.
#Current loc keys in this file:
#GetTributaryOverlord
#GetOldEra
#GetLocalPowerStructure
#GetGovernmentSupporters
#GetNoblesReplacementForOtherGovernments


### Titular for Overlord
#Ex: "On a mission to visit the [Son of Heaven]"
defined_text = {
    name = GetTributaryOverlord

    text = {
        localisation_key = string_son_of_heaven
        trigger = {
			is_emperor_of_china = yes
            is_female = no
        }
    }
    text = {
        localisation_key = string_daughter_of_heaven
        trigger = {
			is_emperor_of_china = yes
            is_female = yes
        }
    }
	text = {
        localisation_key = string_tributary_overlord_title
        trigger = {
			is_emperor_of_china = no
        }
	}
}

#Supporters of the Ruler, be he a Khan, King or President
#Ex: "The [Royalists] have come to our aid"
defined_text = {
    name = GetGovernmentSupporters

    text = {
        localisation_key = string_royalist
		trigger = {
			government = monarchy
		}
    }
	text = {
        localisation_key = string_khanzada
		trigger = {
			has_reform = steppe_horde
		}
    }
	text = {
        localisation_key = string_royalist
		trigger = {
			government = tribal
		}
    }
	text = {
		 localisation_key = string_republican
		trigger = {
			government = republic
		}
	}
	text = {
		 localisation_key = string_clergy
		trigger = {
			government = theocracy
		}
	}
}


#When you need to refer to a ruling social class but cannot be sure you're dealing with a monarchy.
#Ex: "The [Nobles] are Concerned"
defined_text = {
	name = GetNoblesReplacementForOtherGovernments

	text = {
		localisation_key = string_nobles
		trigger = {
			NOT = { government = republic }
		}
	}
	text = {
		localisation_key = string_influential_families
		trigger = {
			government = republic
		}
	}
}

#When you need to refer to a ruling social class but cannot be sure you're dealing with a monarchy.
#Ex: "The [Nobles] are Concerned"
defined_text = {
	name = GetRoyalOrState

	text = {
		localisation_key = string_royal
		trigger = {
			NOT = { government = republic }
		}
	}
	text = {
		localisation_key = string_state
		trigger = {
			government = republic
		}
	}
}

#When you need to refer a government/state
#In the future incorporate more special things here
#Ex: "The [Crown] of X"
defined_text = {
	name = GetStateForm

	text = {
		localisation_key = string_crown
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = string_council
		trigger = {
			government = republic
		}
	}
	text = { #fallback
		localisation_key = string_govtname
		trigger = {
			NOT = {
				government = monarchy
				government = republic
			}
		}
	}
}

#Definite Article before name? (ie for country names in plural form)
defined_text = {
    name = GetDefiniteArticleBeforePluralCountry
	random = no
	
	text = {
		
        localisation_key = string_definite_article_before_country
        trigger = {
			tag_with_plural_name_trigger = yes
        }
    }
    text = {
        localisation_key = string_empty
        trigger = {
			always = yes
        }
    }
}

#Hiding regency council in titles

defined_text = {
    name = GetRulerOrRegency
	random = no
	
	text = {
        localisation_key = string_ruler_name_really
        trigger = {
			has_regency = no
        }
    }
    text = {
        localisation_key = string_regency_council
        trigger = {
			has_regency = yes
        }
    }
}

#When you need to refer to a ruling social class but cannot be sure you're dealing with a monarchy.
#Ex: "Several [noblemen] / [politicians] / [clergymen]"
defined_text = {
	name = GetNoblemenPoliticians

	text = {
		localisation_key = string_noblemen
		trigger = {
			NOT = { government = republic }
			NOT = { government = theocracy }
			NOT = {
				has_parliament = yes
			}
		}
	}
	text = {
		localisation_key = string_politicians
		trigger = {
			OR = {
				has_parliament = yes
				government = republic
			}
		}
	}
	text = {
		 localisation_key = string_clergymen
		trigger = {
			government = theocracy
			NOT = {
				has_parliament = yes
			}
		}
	}
}

#When you need to refer to a ruling social class but cannot be sure you're dealing with a monarchy.
#Ex: "Several [members of the nobility] / [politicians] / [members of the clergy]"
defined_text = {
	name = GetNobilityPoliticians

	text = {
		localisation_key = string_members_nobility
		trigger = {
			NOT = { government = republic }
			NOT = { government = theocracy }
			NOT = {
				has_parliament = yes
			}
		}
	}
	text = {
		localisation_key = string_politicians
		trigger = {
			OR = {
				has_parliament = yes
				government = republic
			}
		}
	}
	text = {
		 localisation_key = string_clergy_members
		trigger = {
			government = theocracy
			NOT = {
				has_parliament = yes
			}
		}
	}
}


#Because "the Papal Pope" would be a new kind of stupid, also covers regency councils
#Ex: The [English King] / The [Pope] / The [English Regency Council]
defined_text = {
	name = GetRulerAdjAndTitle

	text = {
		localisation_key = string_ruler_adj_and_title
		trigger = {
			has_regency = no
		}
	}
	text = {
		localisation_key = string_adj_and_regency_council
		trigger = {
			has_regency = yes
		}
	}
}


#Gets ruler title or regency council (not strictly speaking necessary as it will still find "king" even if said king is 1 year old)
#Ex: The [King] / The [Regency Council]
defined_text = {
	name = GetRulerTitleOrRegency

	text = {
		localisation_key = string_ruler_title
		trigger = {
			has_regency = no
		}
	}
	text = {
		localisation_key = string_regency_council_2
		trigger = {
			has_regency = yes
		}
	}
}


#If you want to refer to the ruler by name but are not sure whether there may be a regency
#Ex: [King James] / [the Regency Council]
defined_text = {
	name = GetRulerTitleAndNameOrRegency

	text = {
		localisation_key = string_ruler_title_and_name
		trigger = {
			has_regency = no
		}
	}
	text = {
		localisation_key = string_regency_council_no_cap
		trigger = {
			has_regency = yes
		}
	}
}

#If you want to refer to the ruler by name but are not sure whether there may be a regency
#Ex: [King James] / [The Regency Council]
defined_text = {
	name = GetRulerTitleAndNameOrRegencyCap

	text = {
		localisation_key = string_ruler_title_and_name
		trigger = {
			has_regency = no
		}
	}
	text = {
		localisation_key = string_regency_council
		trigger = {
			has_regency = yes
		}
	}
}

#Used to get "Kingdom", "Republic" or "Theocratic State" in a Milanese mission. It is likely to be one of the first two. Can add more if more cases are needed later, or amend the third if someone comes up with better.
defined_text = {
	name = GetTier2GovernmentType

	text = {
		localisation_key = string_republic
		trigger = {
			government = republic
		}
	}
	text = {
		localisation_key = string_kingdom
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = string_theocratic_state
		trigger = {
			government = theocracy
		}
	}
}

###Estate scripted locs: Get current estate name, or if the country lacks one, use the basic one

#defined_text = {
#	name = GetNobilityOrFallbackName
#	random = no
#	
#	text = {
#		localisation_key = country_estate_nobility_name
#		trigger = {
#			has_estate = estate_nobility
#		}
#	}
#	
#	text = {
#		localisation_key = estate_nobility
#		trigger = {
#			NOT = { has_estate = estate_nobility }
#		}
#	}
#}

defined_text = {
	name = GetLegitimacyOrMeritocracy
	random = no
	
	text = {
		localisation_key = meritocracy
		trigger = {
			has_reform = celestial_empire
			has_dlc = "Mandate of Heaven"
		}
	}
	
	text = {
		localisation_key = legitimacy
		trigger = {
			OR = {
				NOT = { has_reform = celestial_empire }
				NOT = { has_dlc = "Mandate of Heaven" }
			}
		}
	}
}

#Prints the province's manufactory (if one is built)
defined_text = {
	name = GetManufactory
	random = no
	text = {
		localisation_key = building_wharf
		trigger = {
			OR = {
				trade_goods = naval_supplies
				trade_goods = fish
				trade_goods = salt
				trade_goods = algae
				trade_goods = crabs
			}
		}
	}
	text = {
		localisation_key = building_weapons
		trigger = {
			OR = {
				trade_goods = copper
				trade_goods = iron
				trade_goods = weapons_and_armor
				trade_goods = corundum
				trade_goods = orichalcum
			}
		}
	}
	text = {
		localisation_key = building_textile
		trigger = {
			OR = {
				trade_goods = wool
				trade_goods = cloth
				trade_goods = silk
				trade_goods = dyes
				trade_goods = leather
			}
		}
	}
	text = {
		localisation_key = building_plantations
		trigger = {
			OR = {
				trade_goods = moon_sugar
				trade_goods = herbs
				trade_goods = beer
			}
		}
	}
	text = {
		localisation_key = building_tradecompany
		trigger = {
			OR = {
				trade_goods = ivory
				trade_goods = slaves
				trade_goods = fur
				trade_goods = corals
				trade_goods = pearls
			}
		}
	}
	text = {
		localisation_key = building_farm_estate
		trigger = {
			OR = {
				trade_goods = livestock
				trade_goods = wine
				trade_goods = crops
				trade_goods = fruits_and_vegetables
				trade_goods = mushrooms
			}
		}
	}
	text = {
		localisation_key = building_mills
		trigger = {
			OR = {
				trade_goods = paper
				trade_goods = gems
				trade_goods = glass
				trade_goods = wood
				trade_goods = potions
			}
		}
	}
	text = {
		localisation_key = building_furnace
		trigger = {
			OR = {
				trade_goods = coal
				trade_goods = ebony
				trade_goods = stalhrim
				trade_goods = moonstone
				trade_goods = quicksilver 
				trade_goods = malachite
				trade_goods = silver 
			}
		}
	}
}

#Prints the estate related to the event advisor via e.g. [This.GetBurghersName]
defined_text = {
	name = GetEventAdvisorEstate
	random = no
	text = {
		localisation_key = this_brahmins
		trigger = {
			has_country_flag = advisor_events_adm
			has_estate = estate_mages
			OR = {
				NOT = { has_estate = estate_priests }
				employed_advisor = {
					category = ADM
				}
			}
		}
	}
	text = {
		localisation_key = this_dhimmi
		trigger = {
			has_country_flag = advisor_events_adm
			has_estate = estate_dhimmi
			employed_advisor = {
				category = ADM
			}
		}
	}
	text = {
		localisation_key = this_clergy
		trigger = {
			has_country_flag = advisor_events_adm
			has_estate = estate_priests
		}
	}
	text = {
		localisation_key = this_vaisyas
		trigger = {
			has_country_flag = advisor_events_dip
			has_estate = estate_merchants
		}
	}
	text = {
		localisation_key = this_jains
		trigger = {
			has_country_flag = advisor_events_dip
			has_estate = estate_commoners
		}
	}
	text = {
		localisation_key = this_burghers
		trigger = {
			has_country_flag = advisor_events_dip
			has_estate = estate_burghers
		}
	}
	text = {
		localisation_key = this_rajputs
		trigger = {
			has_country_flag = advisor_events_mil
			has_estate = estate_warriors
			OR = {
				NOT = { has_estate = estate_nobility }
				employed_advisor = {
					category = MIL
				}
			}
		}
	}
	text = {
		localisation_key = this_marathas
		trigger = {
			has_country_flag = advisor_events_mil
			has_estate = estate_maratha
			OR = {
				NOT = { has_estate = estate_nobility }
				employed_advisor = {
					category = MIL
				}
			}
		}
	}
	text = {
		localisation_key = this_nobles
		trigger = {
			has_country_flag = advisor_events_mil
			has_estate = estate_nobility
		}
	}
	text = {
		localisation_key = this_nomadic_tribes
		trigger = {
			has_estate = estate_nomadic_tribes
		}
	}
	text = { #is used if none of the above ones are true e.g. if you have no estates
		localisation_key = fallback_string_nobility
		trigger = {
			always = yes
		}
	}
}


#Prints the estate related to the event advisor via e.g. [This.GetBurghersName]
defined_text = {
	name = GetVaishyasOrBurghersName
	random = no
	text = {
		localisation_key = this_vaisyas
		trigger = {
			has_estate = estate_merchants
		}
	}
	text = {
		localisation_key = this_burghers
		trigger = {
			has_estate = estate_burghers
		}
	}
}

#Prints the estate related to the event advisor via e.g. [This.GetBurghersName]
defined_text = {
	name = GetMarathasOrRajputsOrNoblesName
	random = no
	text = {
		localisation_key = this_nobles
		trigger = {
			has_estate = estate_nobility
		}
	}
	text = {
		localisation_key = this_rajputs
		trigger = {
			has_estate = estate_warriors
			NOT = { has_estate = estate_nobility }
		}
	}
	text = {
		localisation_key = this_marathas
		trigger = {
			has_estate = estate_maratha
			NOT = { has_estate = estate_nobility }
		}
	}
}

defined_text = {
	name = GetRandom_Sin

	text = {
		localisation_key = sin_sexual_immorality
	}
	text = {
		localisation_key = sin_greedy_landlord
	}
	text = {
		localisation_key = sin_impiety
	}
	text = {
		localisation_key = sin_wroth
	}
	text = {
		localisation_key = sin_adultery
	}
}

defined_text = {
	name = GetRulerHome
	random = no

	text = {
		localisation_key = palace
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = cathedral
		trigger = {
			government = theocracy
		}
	}
	text = {
		localisation_key = residence
		trigger = {
			government = republic
		}
	}
	text = {
		localisation_key = hall
		trigger = {
			OR = {
				government = tribal
				government = native
			}
		}
	}
}

defined_text = {
	name = GetMotherFather
	random = no

	text = {
		localisation_key = mother
		trigger = {
			is_female = yes
			NOT = { has_regency = yes }
		}
	}
	text = {
		localisation_key = father
		trigger = {
			NOT = {
				is_female = yes
			}
			NOT = { has_regency = yes }
		}
	}
	text = {
		localisation_key = king
		trigger = {
			NOT = { is_female = yes }
			has_regency = yes
		}
	}
	text = {
		localisation_key = queen
		trigger = {
			is_female = yes
			has_regency = yes
		}
	}
}

defined_text = {
    name = GetNumConvertedProvinces

    text = {
        localisation_key = ZERO
        trigger = {
            NOT = {
                check_variable = {
                    which = num_converted_religion
                    value = 1
                }
            }
        }
    }

    text = {
        localisation_key = NUM_OF_CONVERTED_PROVINCES_COUNTER
        trigger = {
            check_variable = {
                which = num_converted_religion
                value = 1
            }
        }
    }
}

defined_text = {
	name = GetLegitimacyOrSimilarCurrency

	text = {
		localisation_key = republican_tradition
		trigger = {
			government = republic
		}
	}
	text = {
		localisation_key = devotion
		trigger = {
			uses_devotion = yes
		}
	}
	text = {
		localisation_key = meritocracy
		trigger = {
			has_dlc = "Mandate of Heaven"
			has_reform = celestial_empire
		}
	}
	text = {
		localisation_key = horde_unity
		trigger = {
			is_nomad = yes
		}
	}
	text = {
		localisation_key = legitimacy
		#default
	}
}

defined_text = {
	name = CountConversionsDone

	text = {
		localisation_key = conversion_variable
		trigger = {
			check_variable = {
				which = num_converted_religion
				value = 1
			}
		}
	}
	text = {
		localisation_key = conversion_variable_zero
		trigger = {
			NOT = {
				check_variable = {
					which = num_converted_religion
					value = 1
				}
			}
		}
	}
}