new named_int SPELL_TOP = 120
new named_int SPELL_LEFT = 10
new named_int SPELL_RIGHT = 285

interface_files:countrytechnologyview:countrytechnologyview += {
	windowType = {
		name = "spells_menu"
		position = { x = 0 y = 0 }
		scripted = yes
	}
}
new custom_window spells_menu = {
	potential = {
		has_country_flag = show_magic_menu
	}
}
new named_ui_node spell_menu_node = interface_files:countrytechnologyview:countrytechnologyview:spells_menu

new named_bool current_spell_side = no
new named_int current_spell_position_y = 0

spell_menu_node += {
	windowType = {
		name = "spells_page_0"
		position = { x = 0 y = 0 }
		scripted = yes
	}
}
new custom_window spells_page_0 = {
	potential = {
		&open_spell_page == 0
	}
}
new named_ui_node current_spell_page = spell_menu_node:spells_page_0

new named_effect calculate_spell_costs = { }
force_compile = calculate_spell_costs

new country_event cast_spell.1 = {
	title = "Cast a Spell"
	major = yes
	
	immediate = {
		hidden_effect = {
			variables:spell_cost_modifier_var:calculate
			
			foreach $ in spells [$:type == "diplomatic"] {
				new script_variable `{$:id}_spell_cost` = {
					name = "{$:name} Cost"
				}
				&`{$:id}_spell_cost` := $:cost
				&`{$:id}_spell_cost` *= spell_cost_modifier_var
				when [$:scaled == yes] {
					&`{$:id}_spell_cost` *= development
					&`{$:id}_spell_cost` *= 0.01
				}
			}
		}
	}
	options = {
		name = "Back"
		effect = { }
	}
}
new named_effect populate_diplomatic_spells = {
	arc_call_1
	foreach $ in spells [$:type == "diplomatic"] {
		events:cast_spell.1:options += { {
			name = "{$:name} [{$:id}_spell_cost.GetValue]£magicka_icon£"
			effect = {
				conditional_effect = {
					tooltip = "§YMagicka ([magicka.GetValue])§! is at least §Y[{$:id}_spell_cost.GetValue] ({$:name} Cost)§!"
					trigger = {
						&magicka >= `{$:id}_spell_cost`
					}
					effect = {
						&magicka -= `{$:id}_spell_cost`
						
						$:on_cast
					}
				}
			}
		} }
	}
	events:cast_spell.1:options += { {
		name = "Back"
		effect = { }
	} }
	arc_call_2
}

new diplomatic_action cast_spell = {
	name = "£magicka_icon£ Cast Spell £magicka_icon£"
	title = "£magicka_icon£ Cast Spell £magicka_icon£"
	category = influence
	potential = {
		ai = no
	}
	on_accept = {
		FROM = {
			save_event_target_as = spell_target
		}
		country_event = cast_spell.1
	}
}

new class spell = {
	list = spells
	default = {
		scaled = yes
		trigger = {
			
		}
	}
	args = {
		name = string
		type = string #will be made an enum later
		cost = float
		on_cast = named_effect
		scaled = bool
		trigger = named_trigger
	}
	on_create = {
		arc_call_1
		
		when [current_spell_side == no] {
			current_spell_page += {
				iconType = {
					name = `custom_mechanic_spell_background_{this:id}`
					position = { x = (SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + current_spell_position_y) }
					quadTextureSprite = `"GFX_spell_type_background_{this:type}"`
					scripted = yes
				}
				guiButtonType = {
					name = `custom_mechanic_spell_{this:id}`
					position = { x = (7 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 6 + current_spell_position_y) }
					quadTextureSprite = `"GFX_spells_{this:id}"`
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_name_{this:id}`
					position = { x = (59+5 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 8 + current_spell_position_y) }
					maxWidth = 175
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_cost_{this:id}`
					position = { x = (59+5 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 29 + current_spell_position_y) }
					format = right
					maxWidth = 170
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_type_{this:id}`
					position = { x = (59+5+2 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 29 + current_spell_position_y) }
					maxWidth = 115
					maxHeight = 20
					scripted = yes
				}
			}
		}
		when_not {
			current_spell_page += {
				iconType = {
					name = `custom_mechanic_spell_background_{this:id}`
					position = { x = (SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + current_spell_position_y) }
					quadTextureSprite = `"GFX_spell_type_background_{this:type}_right"`
					scripted = yes
				}
				guiButtonType = {
					name = `custom_mechanic_spell_{this:id}`
					position = { x = (187 + 7 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 6 + current_spell_position_y) }
					quadTextureSprite = `"GFX_spells_{this:id}"`
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_name_{this:id}`
					position = { x = (10 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 8 + current_spell_position_y) }
					format = right
					maxWidth = 175
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_cost_{this:id}`
					position = { x = (59+5-48 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 29 + current_spell_position_y) }
					maxWidth = 55
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_type_{this:id}`
					position = { x = (59+5+2 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 29 + current_spell_position_y) }
					format = right
					maxWidth = 118
					maxHeight = 20
					scripted = yes
				}
			}
		}
		
		calculate_spell_costs += {
			when [this:type != "diplomatic"] {
				new script_variable `{this:id}_spell_cost` = {
					name = "{this:name} Cost"
				}
				&`{this:id}_spell_cost` := this:cost
				&`{this:id}_spell_cost` *= spell_cost_modifier_var
				when [this:scaled == yes] {
					&`{this:id}_spell_cost` *= development
					&`{this:id}_spell_cost` *= 0.01
				}
			}
		}
		
		new custom_icon `custom_mechanic_spell_background_{this:id}` = { }
		new custom_text_box `custom_mechanic_spell_name_{this:id}` = {
			name = this:name
		}
		new custom_text_box `custom_mechanic_spell_type_{this:id}` = {
			name = `{id_to_name = this:type}`
			tooltip = `This spell is of the §Y{id_to_name = this:type}§! Type

§YCountry§! type spells affect the entire country, they can be cast from the spells window. Their cost is often multiplied by the size of your country.
§YDiplomatic§! type spells affect another country, they can be cast from the diplomatic window. Their cost is often multiplied by the size of the target country.
§YProvince§! type spells affect a single province, they can be cast from the province window.
§YRitual§! type spells temporarily inhibit your magicka generation, but result in greater effects once completed, they can be cast from the spells window.
§YSiege§! type spells affect a siege, they can be cast from the siege window.`
		}
		new custom_text_box `custom_mechanic_spell_cost_{this:id}` = {
			name = `[{this:id}_spell_cost.GetValue]`
			tooltip = `This spell costs [{this:id}_spell_cost.GetValue]£magicka_icon£ to cast`
		}
		
		new custom_button `custom_mechanic_spell_{this:id}` = {
			tooltip = "{this:name}
-------------
This spell has a base cost of §Y{this:cost}§!. This cost is further modified by:
	Spell cost modifier: §Y[spell_cost_modifier_percent.GetValue]%§!"
			trigger = {
				this:trigger
				
				&magicka >= `{this:id}_spell_cost`
			}
			effect = { }
		}
		
		when [
			this:type != "country"
			this:type != "ritual"
		] {
			custom_buttons:last:trigger := {
				custom_trigger_tooltip = {
					new_tooltip = "This is not a §YCountry§! or §YRitual§! type spell, and thus cannot be cast from this menu."
					always = no
				}
			}
		}
		when_not {
			custom_buttons:last:effect +=! {
				hidden_effect = {
					&`{this:id}_spell_cost` := this:cost
					&`{this:id}_spell_cost` *= spell_cost_modifier_var
					when [this:scaled == yes] {
						&`{this:id}_spell_cost` *= development
						&`{this:id}_spell_cost` *= 0.01
					}
					&magicka -= `{this:id}_spell_cost`
				}
				this:on_cast
			}
		}
		
		when [this:scaled == yes] { custom_buttons:last:tooltip += "
	Development: §Y[development.GetValue]%§!" }
		
		current_spell_position_y += 57
		
		when [current_spell_position_y > 700] {
			create_next_spell_page = yes
		}
		
		arc_call_2
	}
}
new class spell_header = {
	list = spell_headers
	args = {
		name = string
	}
	on_create = {
		current_spell_page += {
			iconType = {
				name = `custom_mechanic_spell_header_background_{this:id}`
				position = { x = (65 / 2 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 8 + current_spell_position_y) }
				quadTextureSprite = "GFX_banner_both_3"
				scripted = yes
			}
			instantTextBoxType = {
				name = `custom_mechanic_spell_header_name_{this:id}`
				position = { x = (SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 8 + 8 + current_spell_position_y) }
				maxWidth = 250
				maxHeight = 57
				format = center
				scripted = yes
			}
		}
		
		new custom_icon `custom_mechanic_spell_header_background_{this:id}` = { }
		new custom_text_box `custom_mechanic_spell_header_name_{this:id}` = {
			name = this:name
		}
		
		current_spell_position_y += 41
	}
}

new named_int spell_pages = 0
new effect create_next_spell_page = {
	args = bool
	transpile = {
		when [current_spell_side == yes] {
			spell_pages += 1
			spell_menu_node += {
				windowType = {
					name = `"spells_page_{spell_pages}"`
					position = { x = 0 y = 0 }
					scripted = yes
				}
			}
			new custom_window `spells_page_{spell_pages}` = {
				potential =* {
					&open_spell_page == *spell_pages*
				}
			}
			current_spell_position_y := 0
			current_spell_side := no
			run_effect = {
				delete = current_spell_page
			}
			new named_ui_node current_spell_page = spell_menu_node:last
		}
		when_not {
			current_spell_position_y := 0
			current_spell_side := yes
		}
	}
}