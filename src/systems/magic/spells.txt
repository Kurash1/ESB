new named_int SPELL_TOP = 140
new named_int SPELL_LEFT = 10
new named_int SPELL_RIGHT = 285

interface_files:countrytechnologyview:countrytechnologyview += {
	windowType = {
		name = "spells_menu"
		position = { x = 0 y = 0 }
		scripted = yes
	}
}
new custom_window spells_menu = {
	potential = {
		has_country_flag = show_magic_menu
	}
}
new named_ui_node spell_menu_node = interface_files:countrytechnologyview:countrytechnologyview:spells_menu

new named_bool current_spell_side = no
new named_int current_spell_position_y = 0

spell_menu_node += {
	windowType = {
		name = "spells_page_0"
		position = { x = 0 y = 0 }
		scripted = yes
	}
}
new custom_window spells_page_0 = {
	potential = {
		&open_spell_page == 0
	}
}
new named_ui_node current_spell_page = spell_menu_node:spells_page_0

new class spell = {
	list = spells
	args = {
		name = string
		type = string #will be made an enum later
		cost = float
		on_cast = named_effect
	}
	on_create = {
		when [current_spell_side == no] {
			current_spell_page += {
				iconType = {
					name = `custom_mechanic_spell_background_{this:id}`
					position = { x = (SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + current_spell_position_y) }
					quadTextureSprite = `"GFX_spell_type_background_{this:type}"`
					scripted = yes
				}
				guiButtonType = {
					name = `custom_mechanic_spell_{this:id}`
					position = { x = (7 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 6 + current_spell_position_y) }
					quadTextureSprite = `"GFX_spells_{this:id}"`
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_name_{this:id}`
					position = { x = (59+5 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 8 + current_spell_position_y) }
					maxWidth = 175
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_cost_{this:id}`
					position = { x = (59+5 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 29 + current_spell_position_y) }
					format = right
					maxWidth = 170
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_type_{this:id}`
					position = { x = (59+5+2 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 29 + current_spell_position_y) }
					maxWidth = 115
					maxHeight = 20
					scripted = yes
				}
			}
		}
		when_not {
			current_spell_page += {
				iconType = {
					name = `custom_mechanic_spell_background_{this:id}`
					position = { x = (SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + current_spell_position_y) }
					quadTextureSprite = `"GFX_spell_type_background_{this:type}_right"`
					scripted = yes
				}
				guiButtonType = {
					name = `custom_mechanic_spell_{this:id}`
					position = { x = (187 + 7 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 6 + current_spell_position_y) }
					quadTextureSprite = `"GFX_spells_{this:id}"`
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_name_{this:id}`
					position = { x = (10 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 8 + current_spell_position_y) }
					format = right
					maxWidth = 175
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_cost_{this:id}`
					position = { x = (59+5-48 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 29 + current_spell_position_y) }
					maxWidth = 55
					maxHeight = 20
					scripted = yes
				}
				instantTextBoxType = {
					name = `custom_mechanic_spell_type_{this:id}`
					position = { x = (59+5+2 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 29 + current_spell_position_y) }
					format = right
					maxWidth = 118
					maxHeight = 20
					scripted = yes
				}
			}
		}
		
		new custom_icon `custom_mechanic_spell_background_{this:id}` = { }
		new custom_text_box `custom_mechanic_spell_name_{this:id}` = {
			name = this:name
		}
		new custom_text_box `custom_mechanic_spell_type_{this:id}` = {
			name = `{id_to_name = this:type}`
			tooltip = `This spell is of the §Y{id_to_name = this:type}§! Type

§YCountry§! type spells affect the entire country, they can be cast from the spells window. Their cost is often multiplied by the size of your country.
§YDiplomatic§! type spells affect another country, they can be cast from the diplomatic window. Their cost is often multiplied by the size of the target country.
§YProvince§! type spells affect a single province, they can be cast from the province window.
§YRitual§! type spells temporarily inhibit your magicka generation, but result in greater effects once completed, they can be cast from the spells window.
§YSiege§! type spells affect a siege, they can be cast from the siege window.`
		}
		new custom_text_box `custom_mechanic_spell_cost_{this:id}` = {
			name = `{this:cost}£magicka_icon£`
			tooltip = `This spell costs {this:cost}£magicka_icon£ to cast`
		}
		when [
			OR = {
				this:type == "country"
				this:type == "ritual"
			}
		] {
			new custom_button `custom_mechanic_spell_{this:id}` = {
				tooltip = "{this:name}
	-------------
	This spell costs §Y{this:cost}§! Magicka to cast. This cost is further modified by:
		Spell cost modifier: §Y[spell_cost_modifier_percent.GetValue]%§!"
				trigger =* {
					variable_arithmetic_trigger = {
						custom_tooltip = "Have enough magicka to cast this spell."
						&this_spell_cost &= modifier:spell_cost_modifier
						&this_spell_cost *= *this:cost*
						
						&magicka >= this_spell_cost
					}
				}
				effect =* {
					hidden_effect = {
						add_magicka = -*this:cost*
					}
					*this:on_cast*
				}
			}
		}
		when_not {
			new custom_button `custom_mechanic_spell_{this:id}` = {
				tooltip = "{this:name}
	-------------
	This spell costs §Y{this:cost}§! Magicka to cast. This cost is further modified by:
		Spell cost modifier: §Y[spell_cost_modifier_percent.GetValue]%§!"
				trigger =* {
					variable_arithmetic_trigger = {
						custom_tooltip = "Have enough magicka to cast this spell."
						&this_spell_cost &= modifier:spell_cost_modifier
						&this_spell_cost *= *this:cost*
						
						&magicka >= this_spell_cost
					}
					custom_trigger_tooltip = {
						new_tooltip = "This is not a §YCountry§! or §YRitual§! type spell, and thus cannot be cast from this menu."
						always = no
					}
				}
				effect = { }
			}
		}
		
		current_spell_position_y += 57
	}
}
new class spell_header = {
	list = spell_headers
	args = {
		name = string
	}
	on_create = {
		current_spell_page += {
			iconType = {
				name = `custom_mechanic_spell_header_background_{this:id}`
				position = { x = (65 / 2 + SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 8 + current_spell_position_y) }
				quadTextureSprite = "GFX_banner_both_3"
				scripted = yes
			}
			instantTextBoxType = {
				name = `custom_mechanic_spell_header_name_{this:id}`
				position = { x = (SPELL_LEFT + (current_spell_side * SPELL_RIGHT)) y = (SPELL_TOP + 8 + 8 + current_spell_position_y) }
				maxWidth = 250
				maxHeight = 57
				format = center
				scripted = yes
			}
		}
		
		new custom_icon `custom_mechanic_spell_header_background_{this:id}` = { }
		new custom_text_box `custom_mechanic_spell_header_name_{this:id}` = {
			name = this:name
		}
		
		current_spell_position_y += 41
	}
}



new spell_header alteration = {
	name = "Alteration"
}
new spell shield = {
	name = "Shield"
	type = province
	cost = 10
	on_cast = { }
}
new spell armor = {
	name = "Armor"
	type = country
	cost = 50
	on_cast = { }
}
new spell open = {
	name = "Open"
	type = diplomatic
	cost = 25
	on_cast = { }
}
new spell burden = {
	name = "Burden"
	type = diplomatic
	cost = 15
	on_cast = { }
}
new spell feather = {
	name = "Feather"
	type = country
	cost = 15
	on_cast = { }
}
new spell equilibrium = {
	name = "Equilibrium"
	type = country
	cost = 10
	on_cast = { }
}
new spell sea_stride = {
	name = "Sea Stride"
	type = country
	cost = 25
	on_cast = { }
}
new spell water_breathing = {
	name = "Water Breathing"
	type = country
	cost = 10
	on_cast = { }
}

new spell_header weather_magic = {
	name = "Weather Magic"
}
new spell create_rain = {
	name = "Create Rain"
	type = province
	cost = 10
	on_cast = { }
}
new spell create_winter = {
	name = "Create Winter"
	type = province
	cost = 10
	on_cast = { }
}
new spell create_drought = {
	name = "Create Drought"
	type = province
	cost = 10
	on_cast = { }
}

current_spell_position_y := 0
current_spell_side := yes

new spell_header transmutation = {
	name = "Transmutation"
}
new spell transmute_ore = {
	name = "Transmute Ore"
	type = province
	cost = 10
	on_cast = { }
}

new spell_header illusion = {
	name = "Illusion"
}
new spell invisibility = {
	name = "Invisibility"
	type = country
	cost = 10
	on_cast = { }
}
new spell frenzy = {
	name = "Frenzy"
	type = diplomatic
	cost = 10
	on_cast = { }
}
new spell calm = {
	name = "Calm"
	type = country
	cost = 10
	on_cast = { }
}
new spell rally = {
	name = "Rally"
	type = country
	cost = 10
	on_cast = { }
}
new spell clairvoyance = {
	name = "Clairvoyance"
	type = country
	cost = 10
	on_cast = { }
}

new spell_header mind_magic = {
	name = "Mind Magic"
}
new spell cause_madness = {
	name = "Cause Madness"
	type = diplomatic
	cost = 10
	on_cast = { }
}
new spell charm = {
	name = "Charm"
	type = diplomatic
	cost = 10
	on_cast = { }
}

new spell_header mysticism = {
	name = "Mysticism"
}
new spell mark_recall = {
	name = "Mark/Recall"
	type = country
	cost = 10
	on_cast = { }
}
new spell dispel = {
	name = "Dispel"
	type = country
	cost = 10
	on_cast = { }
}

spell_menu_node += {
	windowType = {
		name = "spells_page_1"
		position = { x = 0 y = 0 }
		scripted = yes
	}
}
new custom_window spells_page_1 = {
	potential = {
		&open_spell_page == 1
	}
}
current_spell_position_y := 0
current_spell_side := no
run_effect = {
	delete = current_spell_page
}
new named_ui_node current_spell_page = spell_menu_node:spells_page_1

new spell_header shadow_magic = {
	name = "Shadow Magic"
}
new spell shadow_travel = {
	name = "Shadow Travel"
	type = country
	cost = 10
	on_cast = { }
}
new spell shadow_gates = {
	name = "Shadow Gates"
	type = country
	cost = 10
	on_cast = { }
}

new spell_header auramancy = {
	name = "Auramancy"
}
new spell recreate_the_past = {
	name = "Recreate the Past"
	type = country
	cost = 10
	on_cast = { }
}
new spell find_motives = {
	name = "Find Motives"
	type = country
	cost = 10
	on_cast = { }
}

new spell_header divination = {
	name = "Divination"
}
new spell vision_of_the_tenth_eye = {
	name = "Vision of the Tenth Eye"
	type = diplomatic
	cost = 10
	on_cast = { }
}

new spell_header destruction = {
	name = "Destruction"
}
new spell destroy_province = {
	name = "Destroy Province"
	type = province
	cost = 10
	on_cast = { }
}
new spell siege_magic = {
	name = "Siege Magic"
	type = siege
	cost = 10
	on_cast = { }
}
new spell destroy_army = {
	name = "Destroy Army"
	type = province
	cost = 10
	on_cast = { }
}
new spell elemental_runes = {
	name = "Elemental Runes"
	type = province
	cost = 10
	on_cast = { }
}
new spell wall_of_elements = {
	name = "Wall of Elements"
	type = province
	cost = 10
	on_cast = { }
}

current_spell_position_y := 0
current_spell_side := yes

new spell_header dark_magic = {
	name = "Dark Magic"
}
new spell drain_magicka = {
	name = "Drain Magicka"
	type = diplomatic
	cost = 10
	on_cast = { }
}
new spell imprison_dissidents = {
	name = "Imprison Dissidents"
	type = country
	cost = 10
	on_cast = { }
}

new spell_header blood_magic = {
	name = "Blood Magic"
}
new spell summon_gargoyles = {
	name = "Summon Gargoyles"
	type = country
	cost = 10
	on_cast = { }
}
new spell paralyze_enemies = {
	name = "Paralyze Enemies"
	type = country
	cost = 10
	on_cast = { }
}
new spell drain_life = {
	name = "Drain Life"
	type = diplomatic
	cost = 10
	on_cast = { }
}
new spell sacrifice_people = {
	name = "Sacrifice People"
	type = province
	cost = 10
	on_cast = { }
}

new spell_header water_magic = {
	name = "Water Magic"
}
new spell read_water_memories = {
	name = "Read Water Memories"
	type = country
	cost = 10
	on_cast = { }
}

spell_menu_node += {
	windowType = {
		name = "spells_page_2"
		position = { x = 0 y = 0 }
		scripted = yes
	}
}
new custom_window spells_page_2 = {
	potential = {
		&open_spell_page == 2
	}
}
current_spell_position_y := 0
current_spell_side := no
run_effect = {
	delete = current_spell_page
}
new named_ui_node current_spell_page = spell_menu_node:spells_page_2


new spell_header conjuration = {
	name = "Conjuration"
}
new spell bound_weapons = {
	name = "Bound Weapons"
	type = country
	cost = 10
	on_cast = { }
}
new spell summon_helpers = {
	name = "Summon Helpers"
	type = country
	cost = 10
	on_cast = { }
}
new spell summon_soldiers = {
	name = "Summon Soldiers"
	type = country
	cost = 10
	on_cast = { }
}
new spell dremora_general = {
	name = "Dremora General"
	type = country
	cost = 10
	on_cast = { }
}
new spell soul_trap = {
	name = "Soul Trap"
	type = diplomatic
	cost = 10
	on_cast = { }
}

new spell_header necromancy = {
	name = "Necromancy"
}
new spell raise_the_dead = {
	name = "Raise the Dead"
	type = province
	cost = 10
	on_cast = { }
}
new spell create_black_soul_gems = {
	name = "Create Black Soul Gems"
	type = country
	cost = 10
	on_cast = { }
}
new spell the_path_of_transcendence = {
	name = "The Path of Transcendence"
	type = ritual
	cost = 10
	on_cast = { }
}

new spell_header flesh_magic = {
	name = "Flesh Magic"
}
new spell create_flesh_golems = {
	name = "Create Flesh Golems"
	type = country
	cost = 10
	on_cast = { }
}
new spell perfect_the_ruler = {
	name = "Perfect the Ruler"
	type = ritual
	cost = 10
	on_cast = { }
}
